# frozen_string_literal: true

# #Namf_Communication
#
# AMF Communication Service Â© 2019, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
#
# The version of the OpenAPI document: 1.0.2
#
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 7.1.0-SNAPSHOT
#

require 'cgi'

module OpenapiClient
  class N1N2MessageCollectionDocumentApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Namf_Communication N1N2 Message Transfer (UE Specific) service Operation
    # @param ue_context_id [String] UE Context Identifier
    # @param n1_n2_message_transfer_req_data [N1N2MessageTransferReqData]
    # @param [Hash] opts the optional parameters
    # @return [N1N2MessageTransferRspData]
    def n1_n2_message_transfer(ue_context_id, n1_n2_message_transfer_req_data, opts = {})
      data, _status_code, _headers = n1_n2_message_transfer_with_http_info(ue_context_id,
                                                                           n1_n2_message_transfer_req_data, opts)
      data
    end

    # Namf_Communication N1N2 Message Transfer (UE Specific) service Operation
    # @param ue_context_id [String] UE Context Identifier
    # @param n1_n2_message_transfer_req_data [N1N2MessageTransferReqData]
    # @param [Hash] opts the optional parameters
    # @return [Array<(N1N2MessageTransferRspData, Integer, Hash)>] N1N2MessageTransferRspData data, response status code and response headers
    def n1_n2_message_transfer_with_http_info(ue_context_id, n1_n2_message_transfer_req_data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: N1N2MessageCollectionDocumentApi.n1_n2_message_transfer ...'
      end
      # verify the required parameter 'ue_context_id' is set
      if @api_client.config.client_side_validation && ue_context_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'ue_context_id' when calling N1N2MessageCollectionDocumentApi.n1_n2_message_transfer"
      end

      pattern = /^(imsi-[0-9]{5,15}|nai-.+|imei-[0-9]{15}|imeisv-[0-9]{16}|cid-.{1,255}|.+)$/
      if @api_client.config.client_side_validation && ue_context_id !~ pattern
        raise ArgumentError,
              "invalid value for 'ue_context_id' when calling N1N2MessageCollectionDocumentApi.n1_n2_message_transfer, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'n1_n2_message_transfer_req_data' is set
      if @api_client.config.client_side_validation && n1_n2_message_transfer_req_data.nil?
        raise ArgumentError,
              "Missing the required parameter 'n1_n2_message_transfer_req_data' when calling N1N2MessageCollectionDocumentApi.n1_n2_message_transfer"
      end

      # resource path
      local_var_path = '/ue-contexts/{ueContextId}/n1-n2-messages'.sub('{ueContextId}',
                                                                       CGI.escape(ue_context_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'multipart/related'])
      header_params['Content-Type'] = content_type unless content_type.nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(n1_n2_message_transfer_req_data)

      # return_type
      return_type = opts[:debug_return_type] || 'N1N2MessageTransferRspData'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oAuth2ClientCredentials']

      new_options = opts.merge(
        operation: :'N1N2MessageCollectionDocumentApi.n1_n2_message_transfer',
        header_params:,
        query_params:,
        form_params:,
        body: post_body,
        auth_names:,
        return_type:
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: N1N2MessageCollectionDocumentApi#n1_n2_message_transfer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end
  end
end
