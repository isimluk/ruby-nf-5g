=begin
#Namf_Communication

#AMF Communication Service Â© 2019, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

The version of the OpenAPI document: 1.0.2

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.1.0-SNAPSHOT

=end

require 'date'
require 'time'

module OpenapiClient
  class CreateUEContext201Response
    attr_accessor :json_data

    attr_accessor :binary_data_n2_information

    attr_accessor :binary_data_n2_information_ext1

    attr_accessor :binary_data_n2_information_ext2

    attr_accessor :binary_data_n2_information_ext3

    attr_accessor :binary_data_n2_information_ext4

    attr_accessor :binary_data_n2_information_ext5

    attr_accessor :binary_data_n2_information_ext6

    attr_accessor :binary_data_n2_information_ext7

    attr_accessor :binary_data_n2_information_ext8

    attr_accessor :binary_data_n2_information_ext9

    attr_accessor :binary_data_n2_information_ext10

    attr_accessor :binary_data_n2_information_ext11

    attr_accessor :binary_data_n2_information_ext12

    attr_accessor :binary_data_n2_information_ext13

    attr_accessor :binary_data_n2_information_ext14

    attr_accessor :binary_data_n2_information_ext15

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'json_data' => :'jsonData',
        :'binary_data_n2_information' => :'binaryDataN2Information',
        :'binary_data_n2_information_ext1' => :'binaryDataN2InformationExt1',
        :'binary_data_n2_information_ext2' => :'binaryDataN2InformationExt2',
        :'binary_data_n2_information_ext3' => :'binaryDataN2InformationExt3',
        :'binary_data_n2_information_ext4' => :'binaryDataN2InformationExt4',
        :'binary_data_n2_information_ext5' => :'binaryDataN2InformationExt5',
        :'binary_data_n2_information_ext6' => :'binaryDataN2InformationExt6',
        :'binary_data_n2_information_ext7' => :'binaryDataN2InformationExt7',
        :'binary_data_n2_information_ext8' => :'binaryDataN2InformationExt8',
        :'binary_data_n2_information_ext9' => :'binaryDataN2InformationExt9',
        :'binary_data_n2_information_ext10' => :'binaryDataN2InformationExt10',
        :'binary_data_n2_information_ext11' => :'binaryDataN2InformationExt11',
        :'binary_data_n2_information_ext12' => :'binaryDataN2InformationExt12',
        :'binary_data_n2_information_ext13' => :'binaryDataN2InformationExt13',
        :'binary_data_n2_information_ext14' => :'binaryDataN2InformationExt14',
        :'binary_data_n2_information_ext15' => :'binaryDataN2InformationExt15'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'json_data' => :'UeContextCreatedData',
        :'binary_data_n2_information' => :'File',
        :'binary_data_n2_information_ext1' => :'File',
        :'binary_data_n2_information_ext2' => :'File',
        :'binary_data_n2_information_ext3' => :'File',
        :'binary_data_n2_information_ext4' => :'File',
        :'binary_data_n2_information_ext5' => :'File',
        :'binary_data_n2_information_ext6' => :'File',
        :'binary_data_n2_information_ext7' => :'File',
        :'binary_data_n2_information_ext8' => :'File',
        :'binary_data_n2_information_ext9' => :'File',
        :'binary_data_n2_information_ext10' => :'File',
        :'binary_data_n2_information_ext11' => :'File',
        :'binary_data_n2_information_ext12' => :'File',
        :'binary_data_n2_information_ext13' => :'File',
        :'binary_data_n2_information_ext14' => :'File',
        :'binary_data_n2_information_ext15' => :'File'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::CreateUEContext201Response` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::CreateUEContext201Response`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'json_data')
        self.json_data = attributes[:'json_data']
      end

      if attributes.key?(:'binary_data_n2_information')
        self.binary_data_n2_information = attributes[:'binary_data_n2_information']
      end

      if attributes.key?(:'binary_data_n2_information_ext1')
        self.binary_data_n2_information_ext1 = attributes[:'binary_data_n2_information_ext1']
      end

      if attributes.key?(:'binary_data_n2_information_ext2')
        self.binary_data_n2_information_ext2 = attributes[:'binary_data_n2_information_ext2']
      end

      if attributes.key?(:'binary_data_n2_information_ext3')
        self.binary_data_n2_information_ext3 = attributes[:'binary_data_n2_information_ext3']
      end

      if attributes.key?(:'binary_data_n2_information_ext4')
        self.binary_data_n2_information_ext4 = attributes[:'binary_data_n2_information_ext4']
      end

      if attributes.key?(:'binary_data_n2_information_ext5')
        self.binary_data_n2_information_ext5 = attributes[:'binary_data_n2_information_ext5']
      end

      if attributes.key?(:'binary_data_n2_information_ext6')
        self.binary_data_n2_information_ext6 = attributes[:'binary_data_n2_information_ext6']
      end

      if attributes.key?(:'binary_data_n2_information_ext7')
        self.binary_data_n2_information_ext7 = attributes[:'binary_data_n2_information_ext7']
      end

      if attributes.key?(:'binary_data_n2_information_ext8')
        self.binary_data_n2_information_ext8 = attributes[:'binary_data_n2_information_ext8']
      end

      if attributes.key?(:'binary_data_n2_information_ext9')
        self.binary_data_n2_information_ext9 = attributes[:'binary_data_n2_information_ext9']
      end

      if attributes.key?(:'binary_data_n2_information_ext10')
        self.binary_data_n2_information_ext10 = attributes[:'binary_data_n2_information_ext10']
      end

      if attributes.key?(:'binary_data_n2_information_ext11')
        self.binary_data_n2_information_ext11 = attributes[:'binary_data_n2_information_ext11']
      end

      if attributes.key?(:'binary_data_n2_information_ext12')
        self.binary_data_n2_information_ext12 = attributes[:'binary_data_n2_information_ext12']
      end

      if attributes.key?(:'binary_data_n2_information_ext13')
        self.binary_data_n2_information_ext13 = attributes[:'binary_data_n2_information_ext13']
      end

      if attributes.key?(:'binary_data_n2_information_ext14')
        self.binary_data_n2_information_ext14 = attributes[:'binary_data_n2_information_ext14']
      end

      if attributes.key?(:'binary_data_n2_information_ext15')
        self.binary_data_n2_information_ext15 = attributes[:'binary_data_n2_information_ext15']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          json_data == o.json_data &&
          binary_data_n2_information == o.binary_data_n2_information &&
          binary_data_n2_information_ext1 == o.binary_data_n2_information_ext1 &&
          binary_data_n2_information_ext2 == o.binary_data_n2_information_ext2 &&
          binary_data_n2_information_ext3 == o.binary_data_n2_information_ext3 &&
          binary_data_n2_information_ext4 == o.binary_data_n2_information_ext4 &&
          binary_data_n2_information_ext5 == o.binary_data_n2_information_ext5 &&
          binary_data_n2_information_ext6 == o.binary_data_n2_information_ext6 &&
          binary_data_n2_information_ext7 == o.binary_data_n2_information_ext7 &&
          binary_data_n2_information_ext8 == o.binary_data_n2_information_ext8 &&
          binary_data_n2_information_ext9 == o.binary_data_n2_information_ext9 &&
          binary_data_n2_information_ext10 == o.binary_data_n2_information_ext10 &&
          binary_data_n2_information_ext11 == o.binary_data_n2_information_ext11 &&
          binary_data_n2_information_ext12 == o.binary_data_n2_information_ext12 &&
          binary_data_n2_information_ext13 == o.binary_data_n2_information_ext13 &&
          binary_data_n2_information_ext14 == o.binary_data_n2_information_ext14 &&
          binary_data_n2_information_ext15 == o.binary_data_n2_information_ext15
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [json_data, binary_data_n2_information, binary_data_n2_information_ext1, binary_data_n2_information_ext2, binary_data_n2_information_ext3, binary_data_n2_information_ext4, binary_data_n2_information_ext5, binary_data_n2_information_ext6, binary_data_n2_information_ext7, binary_data_n2_information_ext8, binary_data_n2_information_ext9, binary_data_n2_information_ext10, binary_data_n2_information_ext11, binary_data_n2_information_ext12, binary_data_n2_information_ext13, binary_data_n2_information_ext14, binary_data_n2_information_ext15].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
