=begin
#Namf_Communication

#AMF Communication Service Â© 2019, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

The version of the OpenAPI document: 1.0.2

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.1.0-SNAPSHOT

=end

require 'date'
require 'time'

module OpenapiClient
  class N1N2MessageTransferReqData
    attr_accessor :n1_message_container

    attr_accessor :n2_info_container

    attr_accessor :skip_ind

    attr_accessor :last_msg_indication

    attr_accessor :pdu_session_id

    attr_accessor :lcs_correlation_id

    attr_accessor :ppi

    attr_accessor :arp

    attr_accessor :_5qi

    attr_accessor :n1n2_failure_txf_notif_uri

    attr_accessor :smf_reallocation_ind

    attr_accessor :area_of_validity

    attr_accessor :supported_features

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'n1_message_container' => :'n1MessageContainer',
        :'n2_info_container' => :'n2InfoContainer',
        :'skip_ind' => :'skipInd',
        :'last_msg_indication' => :'lastMsgIndication',
        :'pdu_session_id' => :'pduSessionId',
        :'lcs_correlation_id' => :'lcsCorrelationId',
        :'ppi' => :'ppi',
        :'arp' => :'arp',
        :'_5qi' => :'5qi',
        :'n1n2_failure_txf_notif_uri' => :'n1n2FailureTxfNotifURI',
        :'smf_reallocation_ind' => :'smfReallocationInd',
        :'area_of_validity' => :'areaOfValidity',
        :'supported_features' => :'supportedFeatures'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'n1_message_container' => :'N1MessageContainer',
        :'n2_info_container' => :'N2InfoContainer',
        :'skip_ind' => :'Boolean',
        :'last_msg_indication' => :'Boolean',
        :'pdu_session_id' => :'Integer',
        :'lcs_correlation_id' => :'String',
        :'ppi' => :'Integer',
        :'arp' => :'Arp',
        :'_5qi' => :'Integer',
        :'n1n2_failure_txf_notif_uri' => :'String',
        :'smf_reallocation_ind' => :'Boolean',
        :'area_of_validity' => :'AreaOfValidity',
        :'supported_features' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::N1N2MessageTransferReqData` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::N1N2MessageTransferReqData`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'n1_message_container')
        self.n1_message_container = attributes[:'n1_message_container']
      end

      if attributes.key?(:'n2_info_container')
        self.n2_info_container = attributes[:'n2_info_container']
      end

      if attributes.key?(:'skip_ind')
        self.skip_ind = attributes[:'skip_ind']
      else
        self.skip_ind = false
      end

      if attributes.key?(:'last_msg_indication')
        self.last_msg_indication = attributes[:'last_msg_indication']
      end

      if attributes.key?(:'pdu_session_id')
        self.pdu_session_id = attributes[:'pdu_session_id']
      end

      if attributes.key?(:'lcs_correlation_id')
        self.lcs_correlation_id = attributes[:'lcs_correlation_id']
      end

      if attributes.key?(:'ppi')
        self.ppi = attributes[:'ppi']
      end

      if attributes.key?(:'arp')
        self.arp = attributes[:'arp']
      end

      if attributes.key?(:'_5qi')
        self._5qi = attributes[:'_5qi']
      end

      if attributes.key?(:'n1n2_failure_txf_notif_uri')
        self.n1n2_failure_txf_notif_uri = attributes[:'n1n2_failure_txf_notif_uri']
      end

      if attributes.key?(:'smf_reallocation_ind')
        self.smf_reallocation_ind = attributes[:'smf_reallocation_ind']
      else
        self.smf_reallocation_ind = false
      end

      if attributes.key?(:'area_of_validity')
        self.area_of_validity = attributes[:'area_of_validity']
      end

      if attributes.key?(:'supported_features')
        self.supported_features = attributes[:'supported_features']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@pdu_session_id.nil? && @pdu_session_id > 255
        invalid_properties.push('invalid value for "pdu_session_id", must be smaller than or equal to 255.')
      end

      if !@pdu_session_id.nil? && @pdu_session_id < 0
        invalid_properties.push('invalid value for "pdu_session_id", must be greater than or equal to 0.')
      end

      if !@lcs_correlation_id.nil? && @lcs_correlation_id.to_s.length > 255
        invalid_properties.push('invalid value for "lcs_correlation_id", the character length must be smaller than or equal to 255.')
      end

      if !@lcs_correlation_id.nil? && @lcs_correlation_id.to_s.length < 1
        invalid_properties.push('invalid value for "lcs_correlation_id", the character length must be great than or equal to 1.')
      end

      if !@ppi.nil? && @ppi > 7
        invalid_properties.push('invalid value for "ppi", must be smaller than or equal to 7.')
      end

      if !@ppi.nil? && @ppi < 0
        invalid_properties.push('invalid value for "ppi", must be greater than or equal to 0.')
      end

      if !@_5qi.nil? && @_5qi > 255
        invalid_properties.push('invalid value for "_5qi", must be smaller than or equal to 255.')
      end

      if !@_5qi.nil? && @_5qi < 0
        invalid_properties.push('invalid value for "_5qi", must be greater than or equal to 0.')
      end

      pattern = Regexp.new(/^[A-Fa-f0-9]*$/)
      if !@supported_features.nil? && @supported_features !~ pattern
        invalid_properties.push("invalid value for \"supported_features\", must conform to the pattern #{pattern}.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@pdu_session_id.nil? && @pdu_session_id > 255
      return false if !@pdu_session_id.nil? && @pdu_session_id < 0
      return false if !@lcs_correlation_id.nil? && @lcs_correlation_id.to_s.length > 255
      return false if !@lcs_correlation_id.nil? && @lcs_correlation_id.to_s.length < 1
      return false if !@ppi.nil? && @ppi > 7
      return false if !@ppi.nil? && @ppi < 0
      return false if !@_5qi.nil? && @_5qi > 255
      return false if !@_5qi.nil? && @_5qi < 0
      return false if !@supported_features.nil? && @supported_features !~ Regexp.new(/^[A-Fa-f0-9]*$/)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] pdu_session_id Value to be assigned
    def pdu_session_id=(pdu_session_id)
      if pdu_session_id.nil?
        fail ArgumentError, 'pdu_session_id cannot be nil'
      end

      if pdu_session_id > 255
        fail ArgumentError, 'invalid value for "pdu_session_id", must be smaller than or equal to 255.'
      end

      if pdu_session_id < 0
        fail ArgumentError, 'invalid value for "pdu_session_id", must be greater than or equal to 0.'
      end

      @pdu_session_id = pdu_session_id
    end

    # Custom attribute writer method with validation
    # @param [Object] lcs_correlation_id Value to be assigned
    def lcs_correlation_id=(lcs_correlation_id)
      if lcs_correlation_id.nil?
        fail ArgumentError, 'lcs_correlation_id cannot be nil'
      end

      if lcs_correlation_id.to_s.length > 255
        fail ArgumentError, 'invalid value for "lcs_correlation_id", the character length must be smaller than or equal to 255.'
      end

      if lcs_correlation_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "lcs_correlation_id", the character length must be great than or equal to 1.'
      end

      @lcs_correlation_id = lcs_correlation_id
    end

    # Custom attribute writer method with validation
    # @param [Object] ppi Value to be assigned
    def ppi=(ppi)
      if ppi.nil?
        fail ArgumentError, 'ppi cannot be nil'
      end

      if ppi > 7
        fail ArgumentError, 'invalid value for "ppi", must be smaller than or equal to 7.'
      end

      if ppi < 0
        fail ArgumentError, 'invalid value for "ppi", must be greater than or equal to 0.'
      end

      @ppi = ppi
    end

    # Custom attribute writer method with validation
    # @param [Object] _5qi Value to be assigned
    def _5qi=(_5qi)
      if _5qi.nil?
        fail ArgumentError, '_5qi cannot be nil'
      end

      if _5qi > 255
        fail ArgumentError, 'invalid value for "_5qi", must be smaller than or equal to 255.'
      end

      if _5qi < 0
        fail ArgumentError, 'invalid value for "_5qi", must be greater than or equal to 0.'
      end

      @_5qi = _5qi
    end

    # Custom attribute writer method with validation
    # @param [Object] supported_features Value to be assigned
    def supported_features=(supported_features)
      if supported_features.nil?
        fail ArgumentError, 'supported_features cannot be nil'
      end

      pattern = Regexp.new(/^[A-Fa-f0-9]*$/)
      if supported_features !~ pattern
        fail ArgumentError, "invalid value for \"supported_features\", must conform to the pattern #{pattern}."
      end

      @supported_features = supported_features
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          n1_message_container == o.n1_message_container &&
          n2_info_container == o.n2_info_container &&
          skip_ind == o.skip_ind &&
          last_msg_indication == o.last_msg_indication &&
          pdu_session_id == o.pdu_session_id &&
          lcs_correlation_id == o.lcs_correlation_id &&
          ppi == o.ppi &&
          arp == o.arp &&
          _5qi == o._5qi &&
          n1n2_failure_txf_notif_uri == o.n1n2_failure_txf_notif_uri &&
          smf_reallocation_ind == o.smf_reallocation_ind &&
          area_of_validity == o.area_of_validity &&
          supported_features == o.supported_features
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [n1_message_container, n2_info_container, skip_ind, last_msg_indication, pdu_session_id, lcs_correlation_id, ppi, arp, _5qi, n1n2_failure_txf_notif_uri, smf_reallocation_ind, area_of_validity, supported_features].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
