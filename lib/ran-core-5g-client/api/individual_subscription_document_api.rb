# frozen_string_literal: true

# #Namf_EventExposure
#
# AMF Event Exposure Service.   Â© 2023, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
#
# The version of the OpenAPI document: 1.3.0-alpha.3
#
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 7.1.0-SNAPSHOT
#

require 'cgi'

module Core5g
  class IndividualSubscriptionDocumentApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Namf_EventExposure Unsubscribe service Operation
    # @param subscription_id [String] Unique ID of the subscription to be deleted
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_subscription(subscription_id, opts = {})
      delete_subscription_with_http_info(subscription_id, opts)
      nil
    end

    # Namf_EventExposure Unsubscribe service Operation
    # @param subscription_id [String] Unique ID of the subscription to be deleted
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_subscription_with_http_info(subscription_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IndividualSubscriptionDocumentApi.delete_subscription ...'
      end
      # verify the required parameter 'subscription_id' is set
      if @api_client.config.client_side_validation && subscription_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'subscription_id' when calling IndividualSubscriptionDocumentApi.delete_subscription"
      end

      # resource path
      local_var_path = '/subscriptions/{subscriptionId}'.sub('{subscriptionId}',
                                                             CGI.escape(subscription_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oAuth2ClientCredentials']

      new_options = opts.merge(
        operation: :'IndividualSubscriptionDocumentApi.delete_subscription',
        header_params:,
        query_params:,
        form_params:,
        body: post_body,
        auth_names:,
        return_type:
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IndividualSubscriptionDocumentApi#delete_subscription\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Namf_EventExposure Subscribe Modify service Operation
    # @param subscription_id [String] Unique ID of the subscription to be modified
    # @param modify_subscription_request [ModifySubscriptionRequest]
    # @param [Hash] opts the optional parameters
    # @return [AmfUpdatedEventSubscription]
    def modify_subscription(subscription_id, modify_subscription_request, opts = {})
      data, _status_code, _headers = modify_subscription_with_http_info(subscription_id, modify_subscription_request,
                                                                        opts)
      data
    end

    # Namf_EventExposure Subscribe Modify service Operation
    # @param subscription_id [String] Unique ID of the subscription to be modified
    # @param modify_subscription_request [ModifySubscriptionRequest]
    # @param [Hash] opts the optional parameters
    # @return [Array<(AmfUpdatedEventSubscription, Integer, Hash)>] AmfUpdatedEventSubscription data, response status code and response headers
    def modify_subscription_with_http_info(subscription_id, modify_subscription_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IndividualSubscriptionDocumentApi.modify_subscription ...'
      end
      # verify the required parameter 'subscription_id' is set
      if @api_client.config.client_side_validation && subscription_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'subscription_id' when calling IndividualSubscriptionDocumentApi.modify_subscription"
      end

      # resource path
      local_var_path = '/subscriptions/{subscriptionId}'.sub('{subscriptionId}',
                                                             CGI.escape(subscription_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json-patch+json'])
      header_params['Content-Type'] = content_type unless content_type.nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(modify_subscription_request)

      # return_type
      return_type = opts[:debug_return_type] || 'AmfUpdatedEventSubscription'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oAuth2ClientCredentials']

      new_options = opts.merge(
        operation: :'IndividualSubscriptionDocumentApi.modify_subscription',
        header_params:,
        query_params:,
        form_params:,
        body: post_body,
        auth_names:,
        return_type:
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IndividualSubscriptionDocumentApi#modify_subscription\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end
  end
end
