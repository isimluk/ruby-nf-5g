# frozen_string_literal: true

# #Namf_Communication
#
# AMF Communication Service Â© 2019, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
#
# The version of the OpenAPI document: 1.0.2
#
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 7.1.0-SNAPSHOT
#

require 'cgi'

module Core5g
  class IndividualUeContextDocumentApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Namf_Communication CreateUEContext service Operation
    # @param ue_context_id [String] UE Context Identifier
    # @param [Hash] opts the optional parameters
    # @option opts [UeContextCreateData] :json_data
    # @option opts [File] :binary_data_n2_information
    # @option opts [File] :binary_data_n2_information_ext1
    # @option opts [File] :binary_data_n2_information_ext2
    # @option opts [File] :binary_data_n2_information_ext3
    # @option opts [File] :binary_data_n2_information_ext4
    # @option opts [File] :binary_data_n2_information_ext5
    # @option opts [File] :binary_data_n2_information_ext6
    # @option opts [File] :binary_data_n2_information_ext7
    # @option opts [File] :binary_data_n2_information_ext8
    # @option opts [File] :binary_data_n2_information_ext9
    # @option opts [File] :binary_data_n2_information_ext10
    # @option opts [File] :binary_data_n2_information_ext11
    # @option opts [File] :binary_data_n2_information_ext12
    # @option opts [File] :binary_data_n2_information_ext13
    # @option opts [File] :binary_data_n2_information_ext14
    # @option opts [File] :binary_data_n2_information_ext15
    # @option opts [File] :binary_data_n2_information_ext16
    # @return [UeContextCreatedData]
    def create_ue_context(ue_context_id, opts = {})
      data, _status_code, _headers = create_ue_context_with_http_info(ue_context_id, opts)
      data
    end

    # Namf_Communication CreateUEContext service Operation
    # @param ue_context_id [String] UE Context Identifier
    # @param [Hash] opts the optional parameters
    # @option opts [UeContextCreateData] :json_data
    # @option opts [File] :binary_data_n2_information
    # @option opts [File] :binary_data_n2_information_ext1
    # @option opts [File] :binary_data_n2_information_ext2
    # @option opts [File] :binary_data_n2_information_ext3
    # @option opts [File] :binary_data_n2_information_ext4
    # @option opts [File] :binary_data_n2_information_ext5
    # @option opts [File] :binary_data_n2_information_ext6
    # @option opts [File] :binary_data_n2_information_ext7
    # @option opts [File] :binary_data_n2_information_ext8
    # @option opts [File] :binary_data_n2_information_ext9
    # @option opts [File] :binary_data_n2_information_ext10
    # @option opts [File] :binary_data_n2_information_ext11
    # @option opts [File] :binary_data_n2_information_ext12
    # @option opts [File] :binary_data_n2_information_ext13
    # @option opts [File] :binary_data_n2_information_ext14
    # @option opts [File] :binary_data_n2_information_ext15
    # @option opts [File] :binary_data_n2_information_ext16
    # @return [Array<(UeContextCreatedData, Integer, Hash)>] UeContextCreatedData data, response status code and response headers
    def create_ue_context_with_http_info(ue_context_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IndividualUeContextDocumentApi.create_ue_context ...'
      end
      # verify the required parameter 'ue_context_id' is set
      if @api_client.config.client_side_validation && ue_context_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'ue_context_id' when calling IndividualUeContextDocumentApi.create_ue_context"
      end

      pattern = /^(5g-guti-[0-9]{5,6}[0-9a-fA-F]{14}|imsi-[0-9]{5,15}|nai-.+|imei-[0-9]{15}|imeisv-[0-9]{16}|.+)$/
      if @api_client.config.client_side_validation && ue_context_id !~ pattern
        raise ArgumentError,
              "invalid value for 'ue_context_id' when calling IndividualUeContextDocumentApi.create_ue_context, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/ue-contexts/{ueContextId}'.sub('{ueContextId}', CGI.escape(ue_context_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] =
        @api_client.select_header_accept(['application/json', 'multipart/related', 'application/problem+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['multipart/related'])
      header_params['Content-Type'] = content_type unless content_type.nil?

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['jsonData'] = opts[:json_data] unless opts[:json_data].nil?
      unless opts[:binary_data_n2_information].nil?
        form_params['binaryDataN2Information'] =
          opts[:binary_data_n2_information]
      end
      unless opts[:binary_data_n2_information_ext1].nil?
        form_params['binaryDataN2InformationExt1'] =
          opts[:binary_data_n2_information_ext1]
      end
      unless opts[:binary_data_n2_information_ext2].nil?
        form_params['binaryDataN2InformationExt2'] =
          opts[:binary_data_n2_information_ext2]
      end
      unless opts[:binary_data_n2_information_ext3].nil?
        form_params['binaryDataN2InformationExt3'] =
          opts[:binary_data_n2_information_ext3]
      end
      unless opts[:binary_data_n2_information_ext4].nil?
        form_params['binaryDataN2InformationExt4'] =
          opts[:binary_data_n2_information_ext4]
      end
      unless opts[:binary_data_n2_information_ext5].nil?
        form_params['binaryDataN2InformationExt5'] =
          opts[:binary_data_n2_information_ext5]
      end
      unless opts[:binary_data_n2_information_ext6].nil?
        form_params['binaryDataN2InformationExt6'] =
          opts[:binary_data_n2_information_ext6]
      end
      unless opts[:binary_data_n2_information_ext7].nil?
        form_params['binaryDataN2InformationExt7'] =
          opts[:binary_data_n2_information_ext7]
      end
      unless opts[:binary_data_n2_information_ext8].nil?
        form_params['binaryDataN2InformationExt8'] =
          opts[:binary_data_n2_information_ext8]
      end
      unless opts[:binary_data_n2_information_ext9].nil?
        form_params['binaryDataN2InformationExt9'] =
          opts[:binary_data_n2_information_ext9]
      end
      unless opts[:binary_data_n2_information_ext10].nil?
        form_params['binaryDataN2InformationExt10'] =
          opts[:binary_data_n2_information_ext10]
      end
      unless opts[:binary_data_n2_information_ext11].nil?
        form_params['binaryDataN2InformationExt11'] =
          opts[:binary_data_n2_information_ext11]
      end
      unless opts[:binary_data_n2_information_ext12].nil?
        form_params['binaryDataN2InformationExt12'] =
          opts[:binary_data_n2_information_ext12]
      end
      unless opts[:binary_data_n2_information_ext13].nil?
        form_params['binaryDataN2InformationExt13'] =
          opts[:binary_data_n2_information_ext13]
      end
      unless opts[:binary_data_n2_information_ext14].nil?
        form_params['binaryDataN2InformationExt14'] =
          opts[:binary_data_n2_information_ext14]
      end
      unless opts[:binary_data_n2_information_ext15].nil?
        form_params['binaryDataN2InformationExt15'] =
          opts[:binary_data_n2_information_ext15]
      end
      unless opts[:binary_data_n2_information_ext16].nil?
        form_params['binaryDataN2InformationExt16'] =
          opts[:binary_data_n2_information_ext16]
      end

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UeContextCreatedData'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oAuth2ClientCredentials']

      new_options = opts.merge(
        operation: :'IndividualUeContextDocumentApi.create_ue_context',
        header_params:,
        query_params:,
        form_params:,
        body: post_body,
        auth_names:,
        return_type:
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IndividualUeContextDocumentApi#create_ue_context\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Namf_Communication EBI Assignment service Operation
    # @param ue_context_id [String] UE Context Identifier
    # @param assign_ebi_data [AssignEbiData]
    # @param [Hash] opts the optional parameters
    # @return [AssignedEbiData]
    def e_bi_assignment(ue_context_id, assign_ebi_data, opts = {})
      data, _status_code, _headers = e_bi_assignment_with_http_info(ue_context_id, assign_ebi_data, opts)
      data
    end

    # Namf_Communication EBI Assignment service Operation
    # @param ue_context_id [String] UE Context Identifier
    # @param assign_ebi_data [AssignEbiData]
    # @param [Hash] opts the optional parameters
    # @return [Array<(AssignedEbiData, Integer, Hash)>] AssignedEbiData data, response status code and response headers
    def e_bi_assignment_with_http_info(ue_context_id, assign_ebi_data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IndividualUeContextDocumentApi.e_bi_assignment ...'
      end
      # verify the required parameter 'ue_context_id' is set
      if @api_client.config.client_side_validation && ue_context_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'ue_context_id' when calling IndividualUeContextDocumentApi.e_bi_assignment"
      end

      pattern = /^(5g-guti-[0-9]{5,6}[0-9a-fA-F]{14}|imsi-[0-9]{5,15}|nai-.+|imei-[0-9]{15}|imeisv-[0-9]{16}|.+)$/
      if @api_client.config.client_side_validation && ue_context_id !~ pattern
        raise ArgumentError,
              "invalid value for 'ue_context_id' when calling IndividualUeContextDocumentApi.e_bi_assignment, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'assign_ebi_data' is set
      if @api_client.config.client_side_validation && assign_ebi_data.nil?
        raise ArgumentError,
              "Missing the required parameter 'assign_ebi_data' when calling IndividualUeContextDocumentApi.e_bi_assignment"
      end

      # resource path
      local_var_path = '/ue-contexts/{ueContextId}/assign-ebi'.sub('{ueContextId}',
                                                                   CGI.escape(ue_context_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      header_params['Content-Type'] = content_type unless content_type.nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(assign_ebi_data)

      # return_type
      return_type = opts[:debug_return_type] || 'AssignedEbiData'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oAuth2ClientCredentials']

      new_options = opts.merge(
        operation: :'IndividualUeContextDocumentApi.e_bi_assignment',
        header_params:,
        query_params:,
        form_params:,
        body: post_body,
        auth_names:,
        return_type:
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IndividualUeContextDocumentApi#e_bi_assignment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Namf_Communication RegistrationStatusUpdate service Operation
    # @param ue_context_id [String] UE Context Identifier
    # @param ue_reg_status_update_req_data [UeRegStatusUpdateReqData]
    # @param [Hash] opts the optional parameters
    # @return [UeRegStatusUpdateRspData]
    def registration_status_update(ue_context_id, ue_reg_status_update_req_data, opts = {})
      data, _status_code, _headers = registration_status_update_with_http_info(ue_context_id,
                                                                               ue_reg_status_update_req_data, opts)
      data
    end

    # Namf_Communication RegistrationStatusUpdate service Operation
    # @param ue_context_id [String] UE Context Identifier
    # @param ue_reg_status_update_req_data [UeRegStatusUpdateReqData]
    # @param [Hash] opts the optional parameters
    # @return [Array<(UeRegStatusUpdateRspData, Integer, Hash)>] UeRegStatusUpdateRspData data, response status code and response headers
    def registration_status_update_with_http_info(ue_context_id, ue_reg_status_update_req_data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IndividualUeContextDocumentApi.registration_status_update ...'
      end
      # verify the required parameter 'ue_context_id' is set
      if @api_client.config.client_side_validation && ue_context_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'ue_context_id' when calling IndividualUeContextDocumentApi.registration_status_update"
      end

      pattern = /^(5g-guti-[0-9]{5,6}[0-9a-fA-F]{14}|imsi-[0-9]{5,15}|nai-.+|imei-[0-9]{15}|imeisv-[0-9]{16}|.+)$/
      if @api_client.config.client_side_validation && ue_context_id !~ pattern
        raise ArgumentError,
              "invalid value for 'ue_context_id' when calling IndividualUeContextDocumentApi.registration_status_update, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ue_reg_status_update_req_data' is set
      if @api_client.config.client_side_validation && ue_reg_status_update_req_data.nil?
        raise ArgumentError,
              "Missing the required parameter 'ue_reg_status_update_req_data' when calling IndividualUeContextDocumentApi.registration_status_update"
      end

      # resource path
      local_var_path = '/ue-contexts/{ueContextId}/transfer-update'.sub('{ueContextId}',
                                                                        CGI.escape(ue_context_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      header_params['Content-Type'] = content_type unless content_type.nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(ue_reg_status_update_req_data)

      # return_type
      return_type = opts[:debug_return_type] || 'UeRegStatusUpdateRspData'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oAuth2ClientCredentials']

      new_options = opts.merge(
        operation: :'IndividualUeContextDocumentApi.registration_status_update',
        header_params:,
        query_params:,
        form_params:,
        body: post_body,
        auth_names:,
        return_type:
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IndividualUeContextDocumentApi#registration_status_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Namf_Communication ReleaseUEContext service Operation
    # @param ue_context_id [String] UE Context Identifier
    # @param ue_context_release [UEContextRelease]
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def release_ue_context(ue_context_id, ue_context_release, opts = {})
      release_ue_context_with_http_info(ue_context_id, ue_context_release, opts)
      nil
    end

    # Namf_Communication ReleaseUEContext service Operation
    # @param ue_context_id [String] UE Context Identifier
    # @param ue_context_release [UEContextRelease]
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def release_ue_context_with_http_info(ue_context_id, ue_context_release, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IndividualUeContextDocumentApi.release_ue_context ...'
      end
      # verify the required parameter 'ue_context_id' is set
      if @api_client.config.client_side_validation && ue_context_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'ue_context_id' when calling IndividualUeContextDocumentApi.release_ue_context"
      end

      pattern = /^(5g-guti-[0-9]{5,6}[0-9a-fA-F]{14}|imsi-[0-9]{5,15}|nai-.+|imei-[0-9]{15}|imeisv-[0-9]{16}|.+)$/
      if @api_client.config.client_side_validation && ue_context_id !~ pattern
        raise ArgumentError,
              "invalid value for 'ue_context_id' when calling IndividualUeContextDocumentApi.release_ue_context, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ue_context_release' is set
      if @api_client.config.client_side_validation && ue_context_release.nil?
        raise ArgumentError,
              "Missing the required parameter 'ue_context_release' when calling IndividualUeContextDocumentApi.release_ue_context"
      end

      # resource path
      local_var_path = '/ue-contexts/{ueContextId}/release'.sub('{ueContextId}',
                                                                CGI.escape(ue_context_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/problem+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      header_params['Content-Type'] = content_type unless content_type.nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(ue_context_release)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oAuth2ClientCredentials']

      new_options = opts.merge(
        operation: :'IndividualUeContextDocumentApi.release_ue_context',
        header_params:,
        query_params:,
        form_params:,
        body: post_body,
        auth_names:,
        return_type:
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IndividualUeContextDocumentApi#release_ue_context\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Namf_Communication UEContextTransfer service Operation
    # @param ue_context_id [String] UE Context Identifier
    # @param ue_context_transfer_req_data [UeContextTransferReqData]
    # @param [Hash] opts the optional parameters
    # @return [UeContextTransferRspData]
    def u_e_context_transfer(ue_context_id, ue_context_transfer_req_data, opts = {})
      data, _status_code, _headers = u_e_context_transfer_with_http_info(ue_context_id, ue_context_transfer_req_data,
                                                                         opts)
      data
    end

    # Namf_Communication UEContextTransfer service Operation
    # @param ue_context_id [String] UE Context Identifier
    # @param ue_context_transfer_req_data [UeContextTransferReqData]
    # @param [Hash] opts the optional parameters
    # @return [Array<(UeContextTransferRspData, Integer, Hash)>] UeContextTransferRspData data, response status code and response headers
    def u_e_context_transfer_with_http_info(ue_context_id, ue_context_transfer_req_data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IndividualUeContextDocumentApi.u_e_context_transfer ...'
      end
      # verify the required parameter 'ue_context_id' is set
      if @api_client.config.client_side_validation && ue_context_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'ue_context_id' when calling IndividualUeContextDocumentApi.u_e_context_transfer"
      end

      pattern = /^(5g-guti-[0-9]{5,6}[0-9a-fA-F]{14}|imsi-[0-9]{5,15}|nai-.+|imei-[0-9]{15}|imeisv-[0-9]{16}|.+)$/
      if @api_client.config.client_side_validation && ue_context_id !~ pattern
        raise ArgumentError,
              "invalid value for 'ue_context_id' when calling IndividualUeContextDocumentApi.u_e_context_transfer, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ue_context_transfer_req_data' is set
      if @api_client.config.client_side_validation && ue_context_transfer_req_data.nil?
        raise ArgumentError,
              "Missing the required parameter 'ue_context_transfer_req_data' when calling IndividualUeContextDocumentApi.u_e_context_transfer"
      end

      # resource path
      local_var_path = '/ue-contexts/{ueContextId}/transfer'.sub('{ueContextId}',
                                                                 CGI.escape(ue_context_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] =
        @api_client.select_header_accept(['application/json', 'multipart/related', 'application/problem+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'multipart/related'])
      header_params['Content-Type'] = content_type unless content_type.nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(ue_context_transfer_req_data)

      # return_type
      return_type = opts[:debug_return_type] || 'UeContextTransferRspData'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oAuth2ClientCredentials']

      new_options = opts.merge(
        operation: :'IndividualUeContextDocumentApi.u_e_context_transfer',
        header_params:,
        query_params:,
        form_params:,
        body: post_body,
        auth_names:,
        return_type:
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IndividualUeContextDocumentApi#u_e_context_transfer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end
  end
end
