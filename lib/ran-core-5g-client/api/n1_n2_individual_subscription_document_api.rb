# frozen_string_literal: true

# #Namf_Communication
#
# AMF Communication Service Â© 2019, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
#
# The version of the OpenAPI document: 1.0.2
#
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 7.1.0-SNAPSHOT
#

require 'cgi'

module Core5g
  class N1N2IndividualSubscriptionDocumentApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Namf_Communication N1N2 Message UnSubscribe (UE Specific) service Operation
    # @param ue_context_id [String] UE Context Identifier
    # @param subscription_id [String] Subscription Identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def n1_n2_message_un_subscribe(ue_context_id, subscription_id, opts = {})
      n1_n2_message_un_subscribe_with_http_info(ue_context_id, subscription_id, opts)
      nil
    end

    # Namf_Communication N1N2 Message UnSubscribe (UE Specific) service Operation
    # @param ue_context_id [String] UE Context Identifier
    # @param subscription_id [String] Subscription Identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def n1_n2_message_un_subscribe_with_http_info(ue_context_id, subscription_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: N1N2IndividualSubscriptionDocumentApi.n1_n2_message_un_subscribe ...'
      end
      # verify the required parameter 'ue_context_id' is set
      if @api_client.config.client_side_validation && ue_context_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'ue_context_id' when calling N1N2IndividualSubscriptionDocumentApi.n1_n2_message_un_subscribe"
      end

      pattern = /^(5g-guti-[0-9]{5,6}[0-9a-fA-F]{14}|imsi-[0-9]{5,15}|nai-.+|imei-[0-9]{15}|imeisv-[0-9]{16}|.+)$/
      if @api_client.config.client_side_validation && ue_context_id !~ pattern
        raise ArgumentError,
              "invalid value for 'ue_context_id' when calling N1N2IndividualSubscriptionDocumentApi.n1_n2_message_un_subscribe, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'subscription_id' is set
      if @api_client.config.client_side_validation && subscription_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'subscription_id' when calling N1N2IndividualSubscriptionDocumentApi.n1_n2_message_un_subscribe"
      end

      # resource path
      local_var_path = '/ue-contexts/{ueContextId}/n1-n2-messages/subscriptions/{subscriptionId}'.sub('{ueContextId}', CGI.escape(ue_context_id.to_s)).sub(
        '{subscriptionId}', CGI.escape(subscription_id.to_s)
      )

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/problem+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oAuth2ClientCredentials']

      new_options = opts.merge(
        operation: :'N1N2IndividualSubscriptionDocumentApi.n1_n2_message_un_subscribe',
        header_params:,
        query_params:,
        form_params:,
        body: post_body,
        auth_names:,
        return_type:
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: N1N2IndividualSubscriptionDocumentApi#n1_n2_message_un_subscribe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end
  end
end
