# frozen_string_literal: true

# #Namf_Communication
#
# AMF Communication Service Â© 2019, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
#
# The version of the OpenAPI document: 1.0.2
#
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 7.1.0-SNAPSHOT
#

require 'cgi'

module Core5g
  class NonUEN2MessageNotificationIndividualSubscriptionDocumentApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Namf_Communication Non UE N2 Info UnSubscribe service Operation
    # @param n2_notify_subscription_id [String] N2 info Subscription Identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def non_ue_n2_info_un_subscribe(n2_notify_subscription_id, opts = {})
      non_ue_n2_info_un_subscribe_with_http_info(n2_notify_subscription_id, opts)
      nil
    end

    # Namf_Communication Non UE N2 Info UnSubscribe service Operation
    # @param n2_notify_subscription_id [String] N2 info Subscription Identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def non_ue_n2_info_un_subscribe_with_http_info(n2_notify_subscription_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NonUEN2MessageNotificationIndividualSubscriptionDocumentApi.non_ue_n2_info_un_subscribe ...'
      end
      # verify the required parameter 'n2_notify_subscription_id' is set
      if @api_client.config.client_side_validation && n2_notify_subscription_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'n2_notify_subscription_id' when calling NonUEN2MessageNotificationIndividualSubscriptionDocumentApi.non_ue_n2_info_un_subscribe"
      end

      # resource path
      local_var_path = '/non-ue-n2-messages/subscriptions/{n2NotifySubscriptionId}'.sub(
        '{n2NotifySubscriptionId}', CGI.escape(n2_notify_subscription_id.to_s)
      )

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/problem+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oAuth2ClientCredentials']

      new_options = opts.merge(
        operation: :'NonUEN2MessageNotificationIndividualSubscriptionDocumentApi.non_ue_n2_info_un_subscribe',
        header_params:,
        query_params:,
        form_params:,
        body: post_body,
        auth_names:,
        return_type:
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NonUEN2MessageNotificationIndividualSubscriptionDocumentApi#non_ue_n2_info_un_subscribe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end
  end
end
