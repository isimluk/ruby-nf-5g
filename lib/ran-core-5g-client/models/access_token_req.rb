# frozen_string_literal: true

# #Namf_EventExposure
#
# AMF Event Exposure Service.   © 2023, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
#
# The version of the OpenAPI document: 1.3.0-alpha.3
#
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 7.1.0-SNAPSHOT
#

require 'date'
require 'time'

module Core5g
  # Contains information related to the access token request
  class AccessTokenReq
    attr_accessor :grant_type, :nf_type, :target_nf_type, :scope, :requester_plmn, :requester_plmn_list,
                  :requester_snssai_list, :requester_snpn_list, :target_plmn, :target_snpn, :target_snssai_list, :target_nsi_list

    # String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.
    attr_accessor :nf_instance_id

    # String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.
    attr_accessor :target_nf_instance_id

    # Fully Qualified Domain Name
    attr_accessor :requester_fqdn

    # NF Set Identifier (see clause 28.12 of 3GPP TS 23.003), formatted as the following string \"set<Set ID>.<nftype>set.5gc.mnc<MNC>.mcc<MCC>\", or  \"set<SetID>.<NFType>set.5gc.nid<NID>.mnc<MNC>.mcc<MCC>\" with  <MCC> encoded as defined in clause 5.4.2 (\"Mcc\" data type definition)  <MNC> encoding the Mobile Network Code part of the PLMN, comprising 3 digits.    If there are only 2 significant digits in the MNC, one \"0\" digit shall be inserted    at the left side to fill the 3 digits coding of MNC.  Pattern: '^[0-9]{3}$' <NFType> encoded as a value defined in Table 6.1.6.3.3-1 of 3GPP TS 29.510 but    with lower case characters <Set ID> encoded as a string of characters consisting of    alphabetic characters (A-Z and a-z), digits (0-9) and/or the hyphen (-) and that    shall end with either an alphabetic character or a digit.
    attr_accessor :target_nf_set_id

    # NF Service Set Identifier (see clause 28.12 of 3GPP TS 23.003) formatted as the following  string \"set<Set ID>.sn<Service Name>.nfi<NF Instance ID>.5gc.mnc<MNC>.mcc<MCC>\", or  \"set<SetID>.sn<ServiceName>.nfi<NFInstanceID>.5gc.nid<NID>.mnc<MNC>.mcc<MCC>\" with  <MCC> encoded as defined in clause 5.4.2 (\"Mcc\" data type definition)   <MNC> encoding the Mobile Network Code part of the PLMN, comprising 3 digits.    If there are only 2 significant digits in the MNC, one \"0\" digit shall be inserted    at the left side to fill the 3 digits coding of MNC.  Pattern: '^[0-9]{3}$' <NID> encoded as defined in clause 5.4.2 (\"Nid\" data type definition)  <NFInstanceId> encoded as defined in clause 5.3.2  <ServiceName> encoded as defined in 3GPP TS 29.510  <Set ID> encoded as a string of characters consisting of alphabetic    characters (A-Z and a-z), digits (0-9) and/or the hyphen (-) and that shall end    with either an alphabetic character or a digit.
    attr_accessor :target_nf_service_set_id

    # String providing an URI formatted according to RFC 3986.
    attr_accessor :hnrf_access_token_uri

    # String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.
    attr_accessor :source_nf_instance_id

    class EnumAttributeValidator
      attr_reader :datatype, :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        grant_type: :grant_type,
        nf_instance_id: :nfInstanceId,
        nf_type: :nfType,
        target_nf_type: :targetNfType,
        scope: :scope,
        target_nf_instance_id: :targetNfInstanceId,
        requester_plmn: :requesterPlmn,
        requester_plmn_list: :requesterPlmnList,
        requester_snssai_list: :requesterSnssaiList,
        requester_fqdn: :requesterFqdn,
        requester_snpn_list: :requesterSnpnList,
        target_plmn: :targetPlmn,
        target_snpn: :targetSnpn,
        target_snssai_list: :targetSnssaiList,
        target_nsi_list: :targetNsiList,
        target_nf_set_id: :targetNfSetId,
        target_nf_service_set_id: :targetNfServiceSetId,
        hnrf_access_token_uri: :hnrfAccessTokenUri,
        source_nf_instance_id: :sourceNfInstanceId
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        grant_type: :String,
        nf_instance_id: :String,
        nf_type: :NFType,
        target_nf_type: :NFType,
        scope: :String,
        target_nf_instance_id: :String,
        requester_plmn: :PlmnId,
        requester_plmn_list: :'Array<PlmnId>',
        requester_snssai_list: :'Array<Snssai>',
        requester_fqdn: :String,
        requester_snpn_list: :'Array<PlmnIdNid>',
        target_plmn: :PlmnId,
        target_snpn: :PlmnIdNid,
        target_snssai_list: :'Array<Snssai>',
        target_nsi_list: :'Array<String>',
        target_nf_set_id: :String,
        target_nf_service_set_id: :String,
        hnrf_access_token_uri: :String,
        source_nf_instance_id: :String
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      unless attributes.is_a?(Hash)
        raise ArgumentError,
              'The input argument (attributes) must be a hash in `Core5g::AccessTokenReq` initialize method'
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) do |(k, v), h|
        unless self.class.attribute_map.key?(k.to_sym)
          raise ArgumentError,
                "`#{k}` is not a valid attribute in `Core5g::AccessTokenReq`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end

        h[k.to_sym] = v
      end

      self.grant_type = (attributes[:grant_type] if attributes.key?(:grant_type))

      self.nf_instance_id = (attributes[:nf_instance_id] if attributes.key?(:nf_instance_id))

      self.nf_type = attributes[:nf_type] if attributes.key?(:nf_type)

      self.target_nf_type = attributes[:target_nf_type] if attributes.key?(:target_nf_type)

      self.scope = (attributes[:scope] if attributes.key?(:scope))

      self.target_nf_instance_id = attributes[:target_nf_instance_id] if attributes.key?(:target_nf_instance_id)

      self.requester_plmn = attributes[:requester_plmn] if attributes.key?(:requester_plmn)

      if attributes.key?(:requester_plmn_list) && (value = attributes[:requester_plmn_list]).is_a?(Array)
        self.requester_plmn_list = value
      end

      if attributes.key?(:requester_snssai_list) && (value = attributes[:requester_snssai_list]).is_a?(Array)
        self.requester_snssai_list = value
      end

      self.requester_fqdn = attributes[:requester_fqdn] if attributes.key?(:requester_fqdn)

      if attributes.key?(:requester_snpn_list) && (value = attributes[:requester_snpn_list]).is_a?(Array)
        self.requester_snpn_list = value
      end

      self.target_plmn = attributes[:target_plmn] if attributes.key?(:target_plmn)

      self.target_snpn = attributes[:target_snpn] if attributes.key?(:target_snpn)

      if attributes.key?(:target_snssai_list) && (value = attributes[:target_snssai_list]).is_a?(Array)
        self.target_snssai_list = value
      end

      if attributes.key?(:target_nsi_list) && (value = attributes[:target_nsi_list]).is_a?(Array)
        self.target_nsi_list = value
      end

      self.target_nf_set_id = attributes[:target_nf_set_id] if attributes.key?(:target_nf_set_id)

      if attributes.key?(:target_nf_service_set_id)
        self.target_nf_service_set_id = attributes[:target_nf_service_set_id]
      end

      self.hnrf_access_token_uri = attributes[:hnrf_access_token_uri] if attributes.key?(:hnrf_access_token_uri)

      return unless attributes.key?(:source_nf_instance_id)

      self.source_nf_instance_id = attributes[:source_nf_instance_id]
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = []
      invalid_properties.push('invalid value for "grant_type", grant_type cannot be nil.') if @grant_type.nil?

      if @nf_instance_id.nil?
        invalid_properties.push('invalid value for "nf_instance_id", nf_instance_id cannot be nil.')
      end

      invalid_properties.push('invalid value for "scope", scope cannot be nil.') if @scope.nil?

      pattern = /^([a-zA-Z0-9_:-]+)( [a-zA-Z0-9_:-]+)*$/
      unless @scope&.match?(pattern)
        invalid_properties.push("invalid value for \"scope\", must conform to the pattern #{pattern}.")
      end

      if !@requester_plmn_list.nil? && @requester_plmn_list.length < 2
        invalid_properties.push('invalid value for "requester_plmn_list", number of items must be greater than or equal to 2.')
      end

      if !@requester_snssai_list.nil? && @requester_snssai_list.empty?
        invalid_properties.push('invalid value for "requester_snssai_list", number of items must be greater than or equal to 1.')
      end

      if !@requester_fqdn.nil? && @requester_fqdn.to_s.length > 253
        invalid_properties.push('invalid value for "requester_fqdn", the character length must be smaller than or equal to 253.')
      end

      if !@requester_fqdn.nil? && @requester_fqdn.to_s.length < 4
        invalid_properties.push('invalid value for "requester_fqdn", the character length must be great than or equal to 4.')
      end

      pattern = /^([0-9A-Za-z]([-0-9A-Za-z]{0,61}[0-9A-Za-z])?\.)+[A-Za-z]{2,63}\.?$/
      if !@requester_fqdn.nil? && @requester_fqdn !~ pattern
        invalid_properties.push("invalid value for \"requester_fqdn\", must conform to the pattern #{pattern}.")
      end

      if !@requester_snpn_list.nil? && @requester_snpn_list.empty?
        invalid_properties.push('invalid value for "requester_snpn_list", number of items must be greater than or equal to 1.')
      end

      if !@target_snssai_list.nil? && @target_snssai_list.empty?
        invalid_properties.push('invalid value for "target_snssai_list", number of items must be greater than or equal to 1.')
      end

      if !@target_nsi_list.nil? && @target_nsi_list.empty?
        invalid_properties.push('invalid value for "target_nsi_list", number of items must be greater than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @grant_type.nil?

      grant_type_validator = EnumAttributeValidator.new('String', ['client_credentials'])
      return false unless grant_type_validator.valid?(@grant_type)
      return false if @nf_instance_id.nil?
      return false if @scope.nil?
      return false unless @scope&.match?(/^([a-zA-Z0-9_:-]+)( [a-zA-Z0-9_:-]+)*$/)
      return false if !@requester_plmn_list.nil? && @requester_plmn_list.length < 2
      return false if !@requester_snssai_list.nil? && @requester_snssai_list.empty?
      return false if !@requester_fqdn.nil? && @requester_fqdn.to_s.length > 253
      return false if !@requester_fqdn.nil? && @requester_fqdn.to_s.length < 4
      if !@requester_fqdn.nil? && @requester_fqdn !~ /^([0-9A-Za-z]([-0-9A-Za-z]{0,61}[0-9A-Za-z])?\.)+[A-Za-z]{2,63}\.?$/
        return false
      end
      return false if !@requester_snpn_list.nil? && @requester_snpn_list.empty?
      return false if !@target_snssai_list.nil? && @target_snssai_list.empty?
      return false if !@target_nsi_list.nil? && @target_nsi_list.empty?

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] grant_type Object to be assigned
    def grant_type=(grant_type)
      validator = EnumAttributeValidator.new('String', ['client_credentials'])
      unless validator.valid?(grant_type)
        raise ArgumentError, "invalid value for \"grant_type\", must be one of #{validator.allowable_values}."
      end

      @grant_type = grant_type
    end

    # Custom attribute writer method with validation
    # @param [Object] scope Value to be assigned
    def scope=(scope)
      raise ArgumentError, 'scope cannot be nil' if scope.nil?

      pattern = /^([a-zA-Z0-9_:-]+)( [a-zA-Z0-9_:-]+)*$/
      unless scope&.match?(pattern)
        raise ArgumentError, "invalid value for \"scope\", must conform to the pattern #{pattern}."
      end

      @scope = scope
    end

    # Custom attribute writer method with validation
    # @param [Object] requester_plmn_list Value to be assigned
    def requester_plmn_list=(requester_plmn_list)
      raise ArgumentError, 'requester_plmn_list cannot be nil' if requester_plmn_list.nil?

      if requester_plmn_list.length < 2
        raise ArgumentError,
              'invalid value for "requester_plmn_list", number of items must be greater than or equal to 2.'
      end

      @requester_plmn_list = requester_plmn_list
    end

    # Custom attribute writer method with validation
    # @param [Object] requester_snssai_list Value to be assigned
    def requester_snssai_list=(requester_snssai_list)
      raise ArgumentError, 'requester_snssai_list cannot be nil' if requester_snssai_list.nil?

      if requester_snssai_list.empty?
        raise ArgumentError,
              'invalid value for "requester_snssai_list", number of items must be greater than or equal to 1.'
      end

      @requester_snssai_list = requester_snssai_list
    end

    # Custom attribute writer method with validation
    # @param [Object] requester_fqdn Value to be assigned
    def requester_fqdn=(requester_fqdn)
      raise ArgumentError, 'requester_fqdn cannot be nil' if requester_fqdn.nil?

      if requester_fqdn.to_s.length > 253
        raise ArgumentError,
              'invalid value for "requester_fqdn", the character length must be smaller than or equal to 253.'
      end

      if requester_fqdn.to_s.length < 4
        raise ArgumentError,
              'invalid value for "requester_fqdn", the character length must be great than or equal to 4.'
      end

      pattern = /^([0-9A-Za-z]([-0-9A-Za-z]{0,61}[0-9A-Za-z])?\.)+[A-Za-z]{2,63}\.?$/
      unless requester_fqdn&.match?(pattern)
        raise ArgumentError, "invalid value for \"requester_fqdn\", must conform to the pattern #{pattern}."
      end

      @requester_fqdn = requester_fqdn
    end

    # Custom attribute writer method with validation
    # @param [Object] requester_snpn_list Value to be assigned
    def requester_snpn_list=(requester_snpn_list)
      raise ArgumentError, 'requester_snpn_list cannot be nil' if requester_snpn_list.nil?

      if requester_snpn_list.empty?
        raise ArgumentError,
              'invalid value for "requester_snpn_list", number of items must be greater than or equal to 1.'
      end

      @requester_snpn_list = requester_snpn_list
    end

    # Custom attribute writer method with validation
    # @param [Object] target_snssai_list Value to be assigned
    def target_snssai_list=(target_snssai_list)
      raise ArgumentError, 'target_snssai_list cannot be nil' if target_snssai_list.nil?

      if target_snssai_list.empty?
        raise ArgumentError,
              'invalid value for "target_snssai_list", number of items must be greater than or equal to 1.'
      end

      @target_snssai_list = target_snssai_list
    end

    # Custom attribute writer method with validation
    # @param [Object] target_nsi_list Value to be assigned
    def target_nsi_list=(target_nsi_list)
      raise ArgumentError, 'target_nsi_list cannot be nil' if target_nsi_list.nil?

      if target_nsi_list.empty?
        raise ArgumentError, 'invalid value for "target_nsi_list", number of items must be greater than or equal to 1.'
      end

      @target_nsi_list = target_nsi_list
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        grant_type == other.grant_type &&
        nf_instance_id == other.nf_instance_id &&
        nf_type == other.nf_type &&
        target_nf_type == other.target_nf_type &&
        scope == other.scope &&
        target_nf_instance_id == other.target_nf_instance_id &&
        requester_plmn == other.requester_plmn &&
        requester_plmn_list == other.requester_plmn_list &&
        requester_snssai_list == other.requester_snssai_list &&
        requester_fqdn == other.requester_fqdn &&
        requester_snpn_list == other.requester_snpn_list &&
        target_plmn == other.target_plmn &&
        target_snpn == other.target_snpn &&
        target_snssai_list == other.target_snssai_list &&
        target_nsi_list == other.target_nsi_list &&
        target_nf_set_id == other.target_nf_set_id &&
        target_nf_service_set_id == other.target_nf_service_set_id &&
        hnrf_access_token_uri == other.hnrf_access_token_uri &&
        source_nf_instance_id == other.source_nf_instance_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [grant_type, nf_instance_id, nf_type, target_nf_type, scope, target_nf_instance_id, requester_plmn,
       requester_plmn_list, requester_snssai_list, requester_fqdn, requester_snpn_list, target_plmn, target_snpn, target_snssai_list, target_nsi_list, target_nf_set_id, target_nf_service_set_id, hnrf_access_token_uri, source_nf_instance_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash[key.to_s] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash[key.to_s] = attributes[attribute_map[key]].map do |v|
              _deserialize(::Regexp.last_match(1), v)
            end
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash[key.to_s] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Core5g.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
