# frozen_string_literal: true

# #Namf_EventExposure
#
# AMF Event Exposure Service.   Â© 2023, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
#
# The version of the OpenAPI document: 1.3.0-alpha.3
#
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 7.1.0-SNAPSHOT
#

require 'date'
require 'time'

module Core5g
  # Describes how the reports shall be generated by a subscribed event
  class AmfEventMode
    attr_accessor :trigger, :max_reports, :partitioning_criteria, :notif_flag, :muting_exc_instructions,
                  :muting_not_settings, :var_rep_period_info

    # string with format 'date-time' as defined in OpenAPI.
    attr_accessor :expiry

    # indicating a time in seconds.
    attr_accessor :rep_period

    # Unsigned integer indicating Sampling Ratio (see clauses 4.15.1 of 3GPP TS 23.502), expressed in percent.
    attr_accessor :samp_ratio

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        trigger: :trigger,
        max_reports: :maxReports,
        expiry: :expiry,
        rep_period: :repPeriod,
        samp_ratio: :sampRatio,
        partitioning_criteria: :partitioningCriteria,
        notif_flag: :notifFlag,
        muting_exc_instructions: :mutingExcInstructions,
        muting_not_settings: :mutingNotSettings,
        var_rep_period_info: :varRepPeriodInfo
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        trigger: :AmfEventTrigger,
        max_reports: :Integer,
        expiry: :Time,
        rep_period: :Integer,
        samp_ratio: :Integer,
        partitioning_criteria: :'Array<PartitioningCriteria>',
        notif_flag: :NotificationFlag,
        muting_exc_instructions: :MutingExceptionInstructions,
        muting_not_settings: :MutingNotificationsSettings,
        var_rep_period_info: :'Array<VarRepPeriod>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      unless attributes.is_a?(Hash)
        raise ArgumentError,
              'The input argument (attributes) must be a hash in `Core5g::AmfEventMode` initialize method'
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) do |(k, v), h|
        unless self.class.attribute_map.key?(k.to_sym)
          raise ArgumentError,
                "`#{k}` is not a valid attribute in `Core5g::AmfEventMode`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end

        h[k.to_sym] = v
      end

      self.trigger = (attributes[:trigger] if attributes.key?(:trigger))

      self.max_reports = attributes[:max_reports] if attributes.key?(:max_reports)

      self.expiry = attributes[:expiry] if attributes.key?(:expiry)

      self.rep_period = attributes[:rep_period] if attributes.key?(:rep_period)

      self.samp_ratio = attributes[:samp_ratio] if attributes.key?(:samp_ratio)

      if attributes.key?(:partitioning_criteria) && (value = attributes[:partitioning_criteria]).is_a?(Array)
        self.partitioning_criteria = value
      end

      self.notif_flag = attributes[:notif_flag] if attributes.key?(:notif_flag)

      self.muting_exc_instructions = attributes[:muting_exc_instructions] if attributes.key?(:muting_exc_instructions)

      self.muting_not_settings = attributes[:muting_not_settings] if attributes.key?(:muting_not_settings)

      return unless attributes.key?(:var_rep_period_info)
      return unless (value = attributes[:var_rep_period_info]).is_a?(Array)

      self.var_rep_period_info = value
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = []
      invalid_properties.push('invalid value for "trigger", trigger cannot be nil.') if @trigger.nil?

      if !@samp_ratio.nil? && @samp_ratio > 100
        invalid_properties.push('invalid value for "samp_ratio", must be smaller than or equal to 100.')
      end

      if !@samp_ratio.nil? && @samp_ratio < 1
        invalid_properties.push('invalid value for "samp_ratio", must be greater than or equal to 1.')
      end

      if !@partitioning_criteria.nil? && @partitioning_criteria.empty?
        invalid_properties.push('invalid value for "partitioning_criteria", number of items must be greater than or equal to 1.')
      end

      if !@var_rep_period_info.nil? && @var_rep_period_info.empty?
        invalid_properties.push('invalid value for "var_rep_period_info", number of items must be greater than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @trigger.nil?
      return false if !@samp_ratio.nil? && @samp_ratio > 100
      return false if !@samp_ratio.nil? && @samp_ratio < 1
      return false if !@partitioning_criteria.nil? && @partitioning_criteria.empty?
      return false if !@var_rep_period_info.nil? && @var_rep_period_info.empty?

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] samp_ratio Value to be assigned
    def samp_ratio=(samp_ratio)
      raise ArgumentError, 'samp_ratio cannot be nil' if samp_ratio.nil?

      raise ArgumentError, 'invalid value for "samp_ratio", must be smaller than or equal to 100.' if samp_ratio > 100

      raise ArgumentError, 'invalid value for "samp_ratio", must be greater than or equal to 1.' if samp_ratio < 1

      @samp_ratio = samp_ratio
    end

    # Custom attribute writer method with validation
    # @param [Object] partitioning_criteria Value to be assigned
    def partitioning_criteria=(partitioning_criteria)
      raise ArgumentError, 'partitioning_criteria cannot be nil' if partitioning_criteria.nil?

      if partitioning_criteria.empty?
        raise ArgumentError,
              'invalid value for "partitioning_criteria", number of items must be greater than or equal to 1.'
      end

      @partitioning_criteria = partitioning_criteria
    end

    # Custom attribute writer method with validation
    # @param [Object] var_rep_period_info Value to be assigned
    def var_rep_period_info=(var_rep_period_info)
      raise ArgumentError, 'var_rep_period_info cannot be nil' if var_rep_period_info.nil?

      if var_rep_period_info.empty?
        raise ArgumentError,
              'invalid value for "var_rep_period_info", number of items must be greater than or equal to 1.'
      end

      @var_rep_period_info = var_rep_period_info
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        trigger == other.trigger &&
        max_reports == other.max_reports &&
        expiry == other.expiry &&
        rep_period == other.rep_period &&
        samp_ratio == other.samp_ratio &&
        partitioning_criteria == other.partitioning_criteria &&
        notif_flag == other.notif_flag &&
        muting_exc_instructions == other.muting_exc_instructions &&
        muting_not_settings == other.muting_not_settings &&
        var_rep_period_info == other.var_rep_period_info
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [trigger, max_reports, expiry, rep_period, samp_ratio, partitioning_criteria, notif_flag,
       muting_exc_instructions, muting_not_settings, var_rep_period_info].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash[key.to_s] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash[key.to_s] = attributes[attribute_map[key]].map do |v|
              _deserialize(::Regexp.last_match(1), v)
            end
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash[key.to_s] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Core5g.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
