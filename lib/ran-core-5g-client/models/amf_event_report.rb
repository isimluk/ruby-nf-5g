# frozen_string_literal: true

# #Namf_EventExposure
#
# AMF Event Exposure Service.   © 2023, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
#
# The version of the OpenAPI document: 1.3.0-alpha.3
#
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 7.1.0-SNAPSHOT
#

require 'date'
require 'time'

module Core5g
  # Represents a report triggered by a subscribed event type
  class AmfEventReport
    attr_accessor :type, :state, :any_ue, :area_list, :ref_id, :location, :additional_location, :access_type_list,
                  :rm_info_list, :cm_info_list, :reachability, :comm_failure, :loss_of_connect_reason, :number_of_ues, :_5gs_user_state_list, :type_code, :registration_number, :ue_id_ext, :snssai_tai_list, :idle_status_indication, :ue_access_behavior_trends, :ue_location_trends, :mm_trans_location_report_list, :mm_trans_slice_report_list, :term_reason

    # string with format 'date-time' as defined in OpenAPI.
    attr_accessor :time_stamp

    # String providing an URI formatted according to RFC 3986.
    attr_accessor :subscription_id

    # String identifying a Supi that shall contain either an IMSI, a network specific identifier, a Global Cable Identifier (GCI) or a Global Line Identifier (GLI) as specified in clause  2.2A of 3GPP TS 23.003. It shall be formatted as follows  - for an IMSI \"imsi-<imsi>\", where <imsi> shall be formatted according to clause 2.2    of 3GPP TS 23.003 that describes an IMSI.  - for a network specific identifier \"nai-<nai>, where <nai> shall be formatted    according to clause 28.7.2 of 3GPP TS 23.003 that describes an NAI.  - for a GCI \"gci-<gci>\", where <gci> shall be formatted according to clause 28.15.2    of 3GPP TS 23.003.  - for a GLI \"gli-<gli>\", where <gli> shall be formatted according to clause 28.16.2 of    3GPP TS 23.003.To enable that the value is used as part of an URI, the string shall    only contain characters allowed according to the \"lower-with-hyphen\" naming convention    defined in 3GPP TS 29.501.
    attr_accessor :supi

    # String identifying a Gpsi shall contain either an External Id or an MSISDN.  It shall be formatted as follows -External Identifier= \"extid-'extid', where 'extid'  shall be formatted according to clause 19.7.2 of 3GPP TS 23.003 that describes an  External Identifier.
    attr_accessor :gpsi

    # String representing a Permanent Equipment Identifier that may contain - an IMEI or IMEISV, as  specified in clause 6.2 of 3GPP TS 23.003; a MAC address for a 5G-RG or FN-RG via  wireline  access, with an indication that this address cannot be trusted for regulatory purpose if this  address cannot be used as an Equipment Identifier of the FN-RG, as specified in clause 4.7.7  of 3GPP TS23.316. Examples are imei-012345678901234 or imeisv-0123456789012345.
    attr_accessor :pei

    # String with format \"time-numoffset\" optionally appended by \"daylightSavingTime\", where  - \"time-numoffset\" shall represent the time zone adjusted for daylight saving time and be    encoded as time-numoffset as defined in clause 5.6 of IETF RFC 3339;  - \"daylightSavingTime\" shall represent the adjustment that has been made and shall be    encoded as \"+1\" or \"+2\" for a +1 or +2 hours adjustment.   The example is for 8 hours behind UTC, +1 hour adjustment for Daylight Saving Time.
    attr_accessor :timezone

    # string with format 'date-time' as defined in OpenAPI.
    attr_accessor :max_availability_time

    # indicating a time in seconds.
    attr_accessor :unavailability_period

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        type: :type,
        state: :state,
        time_stamp: :timeStamp,
        subscription_id: :subscriptionId,
        any_ue: :anyUe,
        supi: :supi,
        area_list: :areaList,
        ref_id: :refId,
        gpsi: :gpsi,
        pei: :pei,
        location: :location,
        additional_location: :additionalLocation,
        timezone: :timezone,
        access_type_list: :accessTypeList,
        rm_info_list: :rmInfoList,
        cm_info_list: :cmInfoList,
        reachability: :reachability,
        comm_failure: :commFailure,
        loss_of_connect_reason: :lossOfConnectReason,
        number_of_ues: :numberOfUes,
        _5gs_user_state_list: :'5gsUserStateList',
        type_code: :typeCode,
        registration_number: :registrationNumber,
        max_availability_time: :maxAvailabilityTime,
        ue_id_ext: :ueIdExt,
        snssai_tai_list: :snssaiTaiList,
        idle_status_indication: :idleStatusIndication,
        ue_access_behavior_trends: :ueAccessBehaviorTrends,
        ue_location_trends: :ueLocationTrends,
        mm_trans_location_report_list: :mmTransLocationReportList,
        mm_trans_slice_report_list: :mmTransSliceReportList,
        term_reason: :termReason,
        unavailability_period: :unavailabilityPeriod
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        type: :AmfEventType,
        state: :AmfEventState,
        time_stamp: :Time,
        subscription_id: :String,
        any_ue: :Boolean,
        supi: :String,
        area_list: :'Array<AmfEventArea>',
        ref_id: :Integer,
        gpsi: :String,
        pei: :String,
        location: :UserLocation,
        additional_location: :UserLocation,
        timezone: :String,
        access_type_list: :'Array<AccessType>',
        rm_info_list: :'Array<RmInfo>',
        cm_info_list: :'Array<CmInfo>',
        reachability: :UeReachability,
        comm_failure: :CommunicationFailure,
        loss_of_connect_reason: :LossOfConnectivityReason,
        number_of_ues: :Integer,
        _5gs_user_state_list: :'Array<Model5GsUserStateInfo>',
        type_code: :String,
        registration_number: :Integer,
        max_availability_time: :Time,
        ue_id_ext: :'Array<UEIdExt>',
        snssai_tai_list: :'Array<SnssaiTaiMapping>',
        idle_status_indication: :IdleStatusIndication,
        ue_access_behavior_trends: :'Array<UeAccessBehaviorReportItem>',
        ue_location_trends: :'Array<UeLocationTrendsReportItem>',
        mm_trans_location_report_list: :'Array<MmTransactionLocationReportItem>',
        mm_trans_slice_report_list: :'Array<MmTransactionSliceReportItem>',
        term_reason: :SubTerminationReason,
        unavailability_period: :Integer
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      unless attributes.is_a?(Hash)
        raise ArgumentError,
              'The input argument (attributes) must be a hash in `Core5g::AmfEventReport` initialize method'
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) do |(k, v), h|
        unless self.class.attribute_map.key?(k.to_sym)
          raise ArgumentError,
                "`#{k}` is not a valid attribute in `Core5g::AmfEventReport`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end

        h[k.to_sym] = v
      end

      self.type = (attributes[:type] if attributes.key?(:type))

      self.state = (attributes[:state] if attributes.key?(:state))

      self.time_stamp = (attributes[:time_stamp] if attributes.key?(:time_stamp))

      self.subscription_id = attributes[:subscription_id] if attributes.key?(:subscription_id)

      self.any_ue = attributes[:any_ue] if attributes.key?(:any_ue)

      self.supi = attributes[:supi] if attributes.key?(:supi)

      if attributes.key?(:area_list) && (value = attributes[:area_list]).is_a?(Array)
        self.area_list = value
      end

      self.ref_id = attributes[:ref_id] if attributes.key?(:ref_id)

      self.gpsi = attributes[:gpsi] if attributes.key?(:gpsi)

      self.pei = attributes[:pei] if attributes.key?(:pei)

      self.location = attributes[:location] if attributes.key?(:location)

      self.additional_location = attributes[:additional_location] if attributes.key?(:additional_location)

      self.timezone = attributes[:timezone] if attributes.key?(:timezone)

      if attributes.key?(:access_type_list) && (value = attributes[:access_type_list]).is_a?(Array)
        self.access_type_list = value
      end

      if attributes.key?(:rm_info_list) && (value = attributes[:rm_info_list]).is_a?(Array)
        self.rm_info_list = value
      end

      if attributes.key?(:cm_info_list) && (value = attributes[:cm_info_list]).is_a?(Array)
        self.cm_info_list = value
      end

      self.reachability = attributes[:reachability] if attributes.key?(:reachability)

      self.comm_failure = attributes[:comm_failure] if attributes.key?(:comm_failure)

      self.loss_of_connect_reason = attributes[:loss_of_connect_reason] if attributes.key?(:loss_of_connect_reason)

      self.number_of_ues = attributes[:number_of_ues] if attributes.key?(:number_of_ues)

      if attributes.key?(:_5gs_user_state_list) && (value = attributes[:_5gs_user_state_list]).is_a?(Array)
        self._5gs_user_state_list = value
      end

      self.type_code = attributes[:type_code] if attributes.key?(:type_code)

      self.registration_number = attributes[:registration_number] if attributes.key?(:registration_number)

      self.max_availability_time = attributes[:max_availability_time] if attributes.key?(:max_availability_time)

      if attributes.key?(:ue_id_ext) && (value = attributes[:ue_id_ext]).is_a?(Array)
        self.ue_id_ext = value
      end

      if attributes.key?(:snssai_tai_list) && (value = attributes[:snssai_tai_list]).is_a?(Array)
        self.snssai_tai_list = value
      end

      self.idle_status_indication = attributes[:idle_status_indication] if attributes.key?(:idle_status_indication)

      if attributes.key?(:ue_access_behavior_trends) && (value = attributes[:ue_access_behavior_trends]).is_a?(Array)
        self.ue_access_behavior_trends = value
      end

      if attributes.key?(:ue_location_trends) && (value = attributes[:ue_location_trends]).is_a?(Array)
        self.ue_location_trends = value
      end

      if attributes.key?(:mm_trans_location_report_list) && (value = attributes[:mm_trans_location_report_list]).is_a?(Array)
        self.mm_trans_location_report_list = value
      end

      if attributes.key?(:mm_trans_slice_report_list) && (value = attributes[:mm_trans_slice_report_list]).is_a?(Array)
        self.mm_trans_slice_report_list = value
      end

      self.term_reason = attributes[:term_reason] if attributes.key?(:term_reason)

      return unless attributes.key?(:unavailability_period)

      self.unavailability_period = attributes[:unavailability_period]
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = []
      invalid_properties.push('invalid value for "type", type cannot be nil.') if @type.nil?

      invalid_properties.push('invalid value for "state", state cannot be nil.') if @state.nil?

      invalid_properties.push('invalid value for "time_stamp", time_stamp cannot be nil.') if @time_stamp.nil?

      pattern = /^(imsi-[0-9]{5,15}|nai-.+|gci-.+|gli-.+|.+)$/
      if !@supi.nil? && @supi !~ pattern
        invalid_properties.push("invalid value for \"supi\", must conform to the pattern #{pattern}.")
      end

      if !@area_list.nil? && @area_list.empty?
        invalid_properties.push('invalid value for "area_list", number of items must be greater than or equal to 1.')
      end

      pattern = /^(msisdn-[0-9]{5,15}|extid-[^@]+@[^@]+|.+)$/
      if !@gpsi.nil? && @gpsi !~ pattern
        invalid_properties.push("invalid value for \"gpsi\", must conform to the pattern #{pattern}.")
      end

      pattern = /^(imei-[0-9]{15}|imeisv-[0-9]{16}|mac((-[0-9a-fA-F]{2}){6})(-untrusted)?|eui((-[0-9a-fA-F]{2}){8})|.+)$/
      if !@pei.nil? && @pei !~ pattern
        invalid_properties.push("invalid value for \"pei\", must conform to the pattern #{pattern}.")
      end

      if !@access_type_list.nil? && @access_type_list.empty?
        invalid_properties.push('invalid value for "access_type_list", number of items must be greater than or equal to 1.')
      end

      if !@rm_info_list.nil? && @rm_info_list.empty?
        invalid_properties.push('invalid value for "rm_info_list", number of items must be greater than or equal to 1.')
      end

      if !@cm_info_list.nil? && @cm_info_list.empty?
        invalid_properties.push('invalid value for "cm_info_list", number of items must be greater than or equal to 1.')
      end

      if !@_5gs_user_state_list.nil? && @_5gs_user_state_list.empty?
        invalid_properties.push('invalid value for "_5gs_user_state_list", number of items must be greater than or equal to 1.')
      end

      pattern = /^imeitac-[0-9]{8}$/
      if !@type_code.nil? && @type_code !~ pattern
        invalid_properties.push("invalid value for \"type_code\", must conform to the pattern #{pattern}.")
      end

      if !@ue_id_ext.nil? && @ue_id_ext.empty?
        invalid_properties.push('invalid value for "ue_id_ext", number of items must be greater than or equal to 1.')
      end

      if !@snssai_tai_list.nil? && @snssai_tai_list.empty?
        invalid_properties.push('invalid value for "snssai_tai_list", number of items must be greater than or equal to 1.')
      end

      if !@ue_access_behavior_trends.nil? && @ue_access_behavior_trends.empty?
        invalid_properties.push('invalid value for "ue_access_behavior_trends", number of items must be greater than or equal to 1.')
      end

      if !@ue_location_trends.nil? && @ue_location_trends.empty?
        invalid_properties.push('invalid value for "ue_location_trends", number of items must be greater than or equal to 1.')
      end

      if !@mm_trans_location_report_list.nil? && @mm_trans_location_report_list.empty?
        invalid_properties.push('invalid value for "mm_trans_location_report_list", number of items must be greater than or equal to 1.')
      end

      if !@mm_trans_slice_report_list.nil? && @mm_trans_slice_report_list.empty?
        invalid_properties.push('invalid value for "mm_trans_slice_report_list", number of items must be greater than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @type.nil?
      return false if @state.nil?
      return false if @time_stamp.nil?
      return false if !@supi.nil? && @supi !~ /^(imsi-[0-9]{5,15}|nai-.+|gci-.+|gli-.+|.+)$/
      return false if !@area_list.nil? && @area_list.empty?
      return false if !@gpsi.nil? && @gpsi !~ /^(msisdn-[0-9]{5,15}|extid-[^@]+@[^@]+|.+)$/
      if !@pei.nil? && @pei !~ /^(imei-[0-9]{15}|imeisv-[0-9]{16}|mac((-[0-9a-fA-F]{2}){6})(-untrusted)?|eui((-[0-9a-fA-F]{2}){8})|.+)$/
        return false
      end
      return false if !@access_type_list.nil? && @access_type_list.empty?
      return false if !@rm_info_list.nil? && @rm_info_list.empty?
      return false if !@cm_info_list.nil? && @cm_info_list.empty?
      return false if !@_5gs_user_state_list.nil? && @_5gs_user_state_list.empty?
      return false if !@type_code.nil? && @type_code !~ /^imeitac-[0-9]{8}$/
      return false if !@ue_id_ext.nil? && @ue_id_ext.empty?
      return false if !@snssai_tai_list.nil? && @snssai_tai_list.empty?
      return false if !@ue_access_behavior_trends.nil? && @ue_access_behavior_trends.empty?
      return false if !@ue_location_trends.nil? && @ue_location_trends.empty?
      return false if !@mm_trans_location_report_list.nil? && @mm_trans_location_report_list.empty?
      return false if !@mm_trans_slice_report_list.nil? && @mm_trans_slice_report_list.empty?

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] supi Value to be assigned
    def supi=(supi)
      raise ArgumentError, 'supi cannot be nil' if supi.nil?

      pattern = /^(imsi-[0-9]{5,15}|nai-.+|gci-.+|gli-.+|.+)$/
      unless supi&.match?(pattern)
        raise ArgumentError, "invalid value for \"supi\", must conform to the pattern #{pattern}."
      end

      @supi = supi
    end

    # Custom attribute writer method with validation
    # @param [Object] area_list Value to be assigned
    def area_list=(area_list)
      raise ArgumentError, 'area_list cannot be nil' if area_list.nil?

      if area_list.empty?
        raise ArgumentError, 'invalid value for "area_list", number of items must be greater than or equal to 1.'
      end

      @area_list = area_list
    end

    # Custom attribute writer method with validation
    # @param [Object] gpsi Value to be assigned
    def gpsi=(gpsi)
      raise ArgumentError, 'gpsi cannot be nil' if gpsi.nil?

      pattern = /^(msisdn-[0-9]{5,15}|extid-[^@]+@[^@]+|.+)$/
      unless gpsi&.match?(pattern)
        raise ArgumentError, "invalid value for \"gpsi\", must conform to the pattern #{pattern}."
      end

      @gpsi = gpsi
    end

    # Custom attribute writer method with validation
    # @param [Object] pei Value to be assigned
    def pei=(pei)
      raise ArgumentError, 'pei cannot be nil' if pei.nil?

      pattern = /^(imei-[0-9]{15}|imeisv-[0-9]{16}|mac((-[0-9a-fA-F]{2}){6})(-untrusted)?|eui((-[0-9a-fA-F]{2}){8})|.+)$/
      unless pei&.match?(pattern)
        raise ArgumentError, "invalid value for \"pei\", must conform to the pattern #{pattern}."
      end

      @pei = pei
    end

    # Custom attribute writer method with validation
    # @param [Object] access_type_list Value to be assigned
    def access_type_list=(access_type_list)
      raise ArgumentError, 'access_type_list cannot be nil' if access_type_list.nil?

      if access_type_list.empty?
        raise ArgumentError, 'invalid value for "access_type_list", number of items must be greater than or equal to 1.'
      end

      @access_type_list = access_type_list
    end

    # Custom attribute writer method with validation
    # @param [Object] rm_info_list Value to be assigned
    def rm_info_list=(rm_info_list)
      raise ArgumentError, 'rm_info_list cannot be nil' if rm_info_list.nil?

      if rm_info_list.empty?
        raise ArgumentError, 'invalid value for "rm_info_list", number of items must be greater than or equal to 1.'
      end

      @rm_info_list = rm_info_list
    end

    # Custom attribute writer method with validation
    # @param [Object] cm_info_list Value to be assigned
    def cm_info_list=(cm_info_list)
      raise ArgumentError, 'cm_info_list cannot be nil' if cm_info_list.nil?

      if cm_info_list.empty?
        raise ArgumentError, 'invalid value for "cm_info_list", number of items must be greater than or equal to 1.'
      end

      @cm_info_list = cm_info_list
    end

    # Custom attribute writer method with validation
    # @param [Object] _5gs_user_state_list Value to be assigned
    def _5gs_user_state_list=(_5gs_user_state_list)
      raise ArgumentError, '_5gs_user_state_list cannot be nil' if _5gs_user_state_list.nil?

      if _5gs_user_state_list.empty?
        raise ArgumentError,
              'invalid value for "_5gs_user_state_list", number of items must be greater than or equal to 1.'
      end

      @_5gs_user_state_list = _5gs_user_state_list
    end

    # Custom attribute writer method with validation
    # @param [Object] type_code Value to be assigned
    def type_code=(type_code)
      raise ArgumentError, 'type_code cannot be nil' if type_code.nil?

      pattern = /^imeitac-[0-9]{8}$/
      unless type_code&.match?(pattern)
        raise ArgumentError, "invalid value for \"type_code\", must conform to the pattern #{pattern}."
      end

      @type_code = type_code
    end

    # Custom attribute writer method with validation
    # @param [Object] ue_id_ext Value to be assigned
    def ue_id_ext=(ue_id_ext)
      raise ArgumentError, 'ue_id_ext cannot be nil' if ue_id_ext.nil?

      if ue_id_ext.empty?
        raise ArgumentError, 'invalid value for "ue_id_ext", number of items must be greater than or equal to 1.'
      end

      @ue_id_ext = ue_id_ext
    end

    # Custom attribute writer method with validation
    # @param [Object] snssai_tai_list Value to be assigned
    def snssai_tai_list=(snssai_tai_list)
      raise ArgumentError, 'snssai_tai_list cannot be nil' if snssai_tai_list.nil?

      if snssai_tai_list.empty?
        raise ArgumentError, 'invalid value for "snssai_tai_list", number of items must be greater than or equal to 1.'
      end

      @snssai_tai_list = snssai_tai_list
    end

    # Custom attribute writer method with validation
    # @param [Object] ue_access_behavior_trends Value to be assigned
    def ue_access_behavior_trends=(ue_access_behavior_trends)
      raise ArgumentError, 'ue_access_behavior_trends cannot be nil' if ue_access_behavior_trends.nil?

      if ue_access_behavior_trends.empty?
        raise ArgumentError,
              'invalid value for "ue_access_behavior_trends", number of items must be greater than or equal to 1.'
      end

      @ue_access_behavior_trends = ue_access_behavior_trends
    end

    # Custom attribute writer method with validation
    # @param [Object] ue_location_trends Value to be assigned
    def ue_location_trends=(ue_location_trends)
      raise ArgumentError, 'ue_location_trends cannot be nil' if ue_location_trends.nil?

      if ue_location_trends.empty?
        raise ArgumentError,
              'invalid value for "ue_location_trends", number of items must be greater than or equal to 1.'
      end

      @ue_location_trends = ue_location_trends
    end

    # Custom attribute writer method with validation
    # @param [Object] mm_trans_location_report_list Value to be assigned
    def mm_trans_location_report_list=(mm_trans_location_report_list)
      raise ArgumentError, 'mm_trans_location_report_list cannot be nil' if mm_trans_location_report_list.nil?

      if mm_trans_location_report_list.empty?
        raise ArgumentError,
              'invalid value for "mm_trans_location_report_list", number of items must be greater than or equal to 1.'
      end

      @mm_trans_location_report_list = mm_trans_location_report_list
    end

    # Custom attribute writer method with validation
    # @param [Object] mm_trans_slice_report_list Value to be assigned
    def mm_trans_slice_report_list=(mm_trans_slice_report_list)
      raise ArgumentError, 'mm_trans_slice_report_list cannot be nil' if mm_trans_slice_report_list.nil?

      if mm_trans_slice_report_list.empty?
        raise ArgumentError,
              'invalid value for "mm_trans_slice_report_list", number of items must be greater than or equal to 1.'
      end

      @mm_trans_slice_report_list = mm_trans_slice_report_list
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        type == other.type &&
        state == other.state &&
        time_stamp == other.time_stamp &&
        subscription_id == other.subscription_id &&
        any_ue == other.any_ue &&
        supi == other.supi &&
        area_list == other.area_list &&
        ref_id == other.ref_id &&
        gpsi == other.gpsi &&
        pei == other.pei &&
        location == other.location &&
        additional_location == other.additional_location &&
        timezone == other.timezone &&
        access_type_list == other.access_type_list &&
        rm_info_list == other.rm_info_list &&
        cm_info_list == other.cm_info_list &&
        reachability == other.reachability &&
        comm_failure == other.comm_failure &&
        loss_of_connect_reason == other.loss_of_connect_reason &&
        number_of_ues == other.number_of_ues &&
        _5gs_user_state_list == other._5gs_user_state_list &&
        type_code == other.type_code &&
        registration_number == other.registration_number &&
        max_availability_time == other.max_availability_time &&
        ue_id_ext == other.ue_id_ext &&
        snssai_tai_list == other.snssai_tai_list &&
        idle_status_indication == other.idle_status_indication &&
        ue_access_behavior_trends == other.ue_access_behavior_trends &&
        ue_location_trends == other.ue_location_trends &&
        mm_trans_location_report_list == other.mm_trans_location_report_list &&
        mm_trans_slice_report_list == other.mm_trans_slice_report_list &&
        term_reason == other.term_reason &&
        unavailability_period == other.unavailability_period
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [type, state, time_stamp, subscription_id, any_ue, supi, area_list, ref_id, gpsi, pei, location,
       additional_location, timezone, access_type_list, rm_info_list, cm_info_list, reachability, comm_failure, loss_of_connect_reason, number_of_ues, _5gs_user_state_list, type_code, registration_number, max_availability_time, ue_id_ext, snssai_tai_list, idle_status_indication, ue_access_behavior_trends, ue_location_trends, mm_trans_location_report_list, mm_trans_slice_report_list, term_reason, unavailability_period].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash[key.to_s] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash[key.to_s] = attributes[attribute_map[key]].map do |v|
              _deserialize(::Regexp.last_match(1), v)
            end
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash[key.to_s] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Core5g.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
