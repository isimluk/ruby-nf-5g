# frozen_string_literal: true

# #Namf_EventExposure
#
# AMF Event Exposure Service.   Â© 2023, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
#
# The version of the OpenAPI document: 1.3.0-alpha.3
#
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 7.1.0-SNAPSHOT
#

require 'date'
require 'time'

module Core5g
  # Represents an individual event subscription resource on AMF
  class AmfEventSubscription
    attr_accessor :event_list, :notify_correlation_id, :subs_change_notify_correlation_id, :exclude_supi_list,
                  :exclude_gpsi_list, :include_supi_list, :include_gpsi_list, :any_ue, :options, :source_nf_type, :term_notify_ind

    # String providing an URI formatted according to RFC 3986.
    attr_accessor :event_notify_uri

    # String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.
    attr_accessor :nf_id

    # String providing an URI formatted according to RFC 3986.
    attr_accessor :subs_change_notify_uri

    # String identifying a Supi that shall contain either an IMSI, a network specific identifier, a Global Cable Identifier (GCI) or a Global Line Identifier (GLI) as specified in clause  2.2A of 3GPP TS 23.003. It shall be formatted as follows  - for an IMSI \"imsi-<imsi>\", where <imsi> shall be formatted according to clause 2.2    of 3GPP TS 23.003 that describes an IMSI.  - for a network specific identifier \"nai-<nai>, where <nai> shall be formatted    according to clause 28.7.2 of 3GPP TS 23.003 that describes an NAI.  - for a GCI \"gci-<gci>\", where <gci> shall be formatted according to clause 28.15.2    of 3GPP TS 23.003.  - for a GLI \"gli-<gli>\", where <gli> shall be formatted according to clause 28.16.2 of    3GPP TS 23.003.To enable that the value is used as part of an URI, the string shall    only contain characters allowed according to the \"lower-with-hyphen\" naming convention    defined in 3GPP TS 29.501.
    attr_accessor :supi

    # String identifying a group of devices network internal globally unique ID which identifies a set of IMSIs, as specified in clause 19.9 of 3GPP TS 23.003.
    attr_accessor :group_id

    # String identifying a Gpsi shall contain either an External Id or an MSISDN.  It shall be formatted as follows -External Identifier= \"extid-'extid', where 'extid'  shall be formatted according to clause 19.7.2 of 3GPP TS 23.003 that describes an  External Identifier.
    attr_accessor :gpsi

    # String representing a Permanent Equipment Identifier that may contain - an IMEI or IMEISV, as  specified in clause 6.2 of 3GPP TS 23.003; a MAC address for a 5G-RG or FN-RG via  wireline  access, with an indication that this address cannot be trusted for regulatory purpose if this  address cannot be used as an Equipment Identifier of the FN-RG, as specified in clause 4.7.7  of 3GPP TS23.316. Examples are imei-012345678901234 or imeisv-0123456789012345.
    attr_accessor :pei

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        event_list: :eventList,
        event_notify_uri: :eventNotifyUri,
        notify_correlation_id: :notifyCorrelationId,
        nf_id: :nfId,
        subs_change_notify_uri: :subsChangeNotifyUri,
        subs_change_notify_correlation_id: :subsChangeNotifyCorrelationId,
        supi: :supi,
        group_id: :groupId,
        exclude_supi_list: :excludeSupiList,
        exclude_gpsi_list: :excludeGpsiList,
        include_supi_list: :includeSupiList,
        include_gpsi_list: :includeGpsiList,
        gpsi: :gpsi,
        pei: :pei,
        any_ue: :anyUE,
        options: :options,
        source_nf_type: :sourceNfType,
        term_notify_ind: :termNotifyInd
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        event_list: :'Array<AmfEvent>',
        event_notify_uri: :String,
        notify_correlation_id: :String,
        nf_id: :String,
        subs_change_notify_uri: :String,
        subs_change_notify_correlation_id: :String,
        supi: :String,
        group_id: :String,
        exclude_supi_list: :'Array<String>',
        exclude_gpsi_list: :'Array<String>',
        include_supi_list: :'Array<String>',
        include_gpsi_list: :'Array<String>',
        gpsi: :String,
        pei: :String,
        any_ue: :Boolean,
        options: :AmfEventMode,
        source_nf_type: :NFType,
        term_notify_ind: :Boolean
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      unless attributes.is_a?(Hash)
        raise ArgumentError,
              'The input argument (attributes) must be a hash in `Core5g::AmfEventSubscription` initialize method'
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) do |(k, v), h|
        unless self.class.attribute_map.key?(k.to_sym)
          raise ArgumentError,
                "`#{k}` is not a valid attribute in `Core5g::AmfEventSubscription`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end

        h[k.to_sym] = v
      end

      if attributes.key?(:event_list)
        if (value = attributes[:event_list]).is_a?(Array)
          self.event_list = value
        end
      else
        self.event_list = nil
      end

      self.event_notify_uri = (attributes[:event_notify_uri] if attributes.key?(:event_notify_uri))

      self.notify_correlation_id = (attributes[:notify_correlation_id] if attributes.key?(:notify_correlation_id))

      self.nf_id = (attributes[:nf_id] if attributes.key?(:nf_id))

      self.subs_change_notify_uri = attributes[:subs_change_notify_uri] if attributes.key?(:subs_change_notify_uri)

      if attributes.key?(:subs_change_notify_correlation_id)
        self.subs_change_notify_correlation_id = attributes[:subs_change_notify_correlation_id]
      end

      self.supi = attributes[:supi] if attributes.key?(:supi)

      self.group_id = attributes[:group_id] if attributes.key?(:group_id)

      if attributes.key?(:exclude_supi_list) && (value = attributes[:exclude_supi_list]).is_a?(Array)
        self.exclude_supi_list = value
      end

      if attributes.key?(:exclude_gpsi_list) && (value = attributes[:exclude_gpsi_list]).is_a?(Array)
        self.exclude_gpsi_list = value
      end

      if attributes.key?(:include_supi_list) && (value = attributes[:include_supi_list]).is_a?(Array)
        self.include_supi_list = value
      end

      if attributes.key?(:include_gpsi_list) && (value = attributes[:include_gpsi_list]).is_a?(Array)
        self.include_gpsi_list = value
      end

      self.gpsi = attributes[:gpsi] if attributes.key?(:gpsi)

      self.pei = attributes[:pei] if attributes.key?(:pei)

      self.any_ue = attributes[:any_ue] if attributes.key?(:any_ue)

      self.options = attributes[:options] if attributes.key?(:options)

      self.source_nf_type = attributes[:source_nf_type] if attributes.key?(:source_nf_type)

      return unless attributes.key?(:term_notify_ind)

      self.term_notify_ind = attributes[:term_notify_ind]
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = []
      invalid_properties.push('invalid value for "event_list", event_list cannot be nil.') if @event_list.nil?

      if @event_list.empty?
        invalid_properties.push('invalid value for "event_list", number of items must be greater than or equal to 1.')
      end

      if @event_notify_uri.nil?
        invalid_properties.push('invalid value for "event_notify_uri", event_notify_uri cannot be nil.')
      end

      if @notify_correlation_id.nil?
        invalid_properties.push('invalid value for "notify_correlation_id", notify_correlation_id cannot be nil.')
      end

      invalid_properties.push('invalid value for "nf_id", nf_id cannot be nil.') if @nf_id.nil?

      pattern = /^(imsi-[0-9]{5,15}|nai-.+|gci-.+|gli-.+|.+)$/
      if !@supi.nil? && @supi !~ pattern
        invalid_properties.push("invalid value for \"supi\", must conform to the pattern #{pattern}.")
      end

      pattern = /^[A-Fa-f0-9]{8}-[0-9]{3}-[0-9]{2,3}-([A-Fa-f0-9][A-Fa-f0-9]){1,10}$/
      if !@group_id.nil? && @group_id !~ pattern
        invalid_properties.push("invalid value for \"group_id\", must conform to the pattern #{pattern}.")
      end

      if !@exclude_supi_list.nil? && @exclude_supi_list.empty?
        invalid_properties.push('invalid value for "exclude_supi_list", number of items must be greater than or equal to 1.')
      end

      if !@exclude_gpsi_list.nil? && @exclude_gpsi_list.empty?
        invalid_properties.push('invalid value for "exclude_gpsi_list", number of items must be greater than or equal to 1.')
      end

      if !@include_supi_list.nil? && @include_supi_list.empty?
        invalid_properties.push('invalid value for "include_supi_list", number of items must be greater than or equal to 1.')
      end

      if !@include_gpsi_list.nil? && @include_gpsi_list.empty?
        invalid_properties.push('invalid value for "include_gpsi_list", number of items must be greater than or equal to 1.')
      end

      pattern = /^(msisdn-[0-9]{5,15}|extid-[^@]+@[^@]+|.+)$/
      if !@gpsi.nil? && @gpsi !~ pattern
        invalid_properties.push("invalid value for \"gpsi\", must conform to the pattern #{pattern}.")
      end

      pattern = /^(imei-[0-9]{15}|imeisv-[0-9]{16}|mac((-[0-9a-fA-F]{2}){6})(-untrusted)?|eui((-[0-9a-fA-F]{2}){8})|.+)$/
      if !@pei.nil? && @pei !~ pattern
        invalid_properties.push("invalid value for \"pei\", must conform to the pattern #{pattern}.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @event_list.nil?
      return false if @event_list.empty?
      return false if @event_notify_uri.nil?
      return false if @notify_correlation_id.nil?
      return false if @nf_id.nil?
      return false if !@supi.nil? && @supi !~ /^(imsi-[0-9]{5,15}|nai-.+|gci-.+|gli-.+|.+)$/
      if !@group_id.nil? && @group_id !~ /^[A-Fa-f0-9]{8}-[0-9]{3}-[0-9]{2,3}-([A-Fa-f0-9][A-Fa-f0-9]){1,10}$/
        return false
      end
      return false if !@exclude_supi_list.nil? && @exclude_supi_list.empty?
      return false if !@exclude_gpsi_list.nil? && @exclude_gpsi_list.empty?
      return false if !@include_supi_list.nil? && @include_supi_list.empty?
      return false if !@include_gpsi_list.nil? && @include_gpsi_list.empty?
      return false if !@gpsi.nil? && @gpsi !~ /^(msisdn-[0-9]{5,15}|extid-[^@]+@[^@]+|.+)$/
      if !@pei.nil? && @pei !~ /^(imei-[0-9]{15}|imeisv-[0-9]{16}|mac((-[0-9a-fA-F]{2}){6})(-untrusted)?|eui((-[0-9a-fA-F]{2}){8})|.+)$/
        return false
      end

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] event_list Value to be assigned
    def event_list=(event_list)
      raise ArgumentError, 'event_list cannot be nil' if event_list.nil?

      if event_list.empty?
        raise ArgumentError, 'invalid value for "event_list", number of items must be greater than or equal to 1.'
      end

      @event_list = event_list
    end

    # Custom attribute writer method with validation
    # @param [Object] supi Value to be assigned
    def supi=(supi)
      raise ArgumentError, 'supi cannot be nil' if supi.nil?

      pattern = /^(imsi-[0-9]{5,15}|nai-.+|gci-.+|gli-.+|.+)$/
      unless supi&.match?(pattern)
        raise ArgumentError, "invalid value for \"supi\", must conform to the pattern #{pattern}."
      end

      @supi = supi
    end

    # Custom attribute writer method with validation
    # @param [Object] group_id Value to be assigned
    def group_id=(group_id)
      raise ArgumentError, 'group_id cannot be nil' if group_id.nil?

      pattern = /^[A-Fa-f0-9]{8}-[0-9]{3}-[0-9]{2,3}-([A-Fa-f0-9][A-Fa-f0-9]){1,10}$/
      unless group_id&.match?(pattern)
        raise ArgumentError, "invalid value for \"group_id\", must conform to the pattern #{pattern}."
      end

      @group_id = group_id
    end

    # Custom attribute writer method with validation
    # @param [Object] exclude_supi_list Value to be assigned
    def exclude_supi_list=(exclude_supi_list)
      raise ArgumentError, 'exclude_supi_list cannot be nil' if exclude_supi_list.nil?

      if exclude_supi_list.empty?
        raise ArgumentError,
              'invalid value for "exclude_supi_list", number of items must be greater than or equal to 1.'
      end

      @exclude_supi_list = exclude_supi_list
    end

    # Custom attribute writer method with validation
    # @param [Object] exclude_gpsi_list Value to be assigned
    def exclude_gpsi_list=(exclude_gpsi_list)
      raise ArgumentError, 'exclude_gpsi_list cannot be nil' if exclude_gpsi_list.nil?

      if exclude_gpsi_list.empty?
        raise ArgumentError,
              'invalid value for "exclude_gpsi_list", number of items must be greater than or equal to 1.'
      end

      @exclude_gpsi_list = exclude_gpsi_list
    end

    # Custom attribute writer method with validation
    # @param [Object] include_supi_list Value to be assigned
    def include_supi_list=(include_supi_list)
      raise ArgumentError, 'include_supi_list cannot be nil' if include_supi_list.nil?

      if include_supi_list.empty?
        raise ArgumentError,
              'invalid value for "include_supi_list", number of items must be greater than or equal to 1.'
      end

      @include_supi_list = include_supi_list
    end

    # Custom attribute writer method with validation
    # @param [Object] include_gpsi_list Value to be assigned
    def include_gpsi_list=(include_gpsi_list)
      raise ArgumentError, 'include_gpsi_list cannot be nil' if include_gpsi_list.nil?

      if include_gpsi_list.empty?
        raise ArgumentError,
              'invalid value for "include_gpsi_list", number of items must be greater than or equal to 1.'
      end

      @include_gpsi_list = include_gpsi_list
    end

    # Custom attribute writer method with validation
    # @param [Object] gpsi Value to be assigned
    def gpsi=(gpsi)
      raise ArgumentError, 'gpsi cannot be nil' if gpsi.nil?

      pattern = /^(msisdn-[0-9]{5,15}|extid-[^@]+@[^@]+|.+)$/
      unless gpsi&.match?(pattern)
        raise ArgumentError, "invalid value for \"gpsi\", must conform to the pattern #{pattern}."
      end

      @gpsi = gpsi
    end

    # Custom attribute writer method with validation
    # @param [Object] pei Value to be assigned
    def pei=(pei)
      raise ArgumentError, 'pei cannot be nil' if pei.nil?

      pattern = /^(imei-[0-9]{15}|imeisv-[0-9]{16}|mac((-[0-9a-fA-F]{2}){6})(-untrusted)?|eui((-[0-9a-fA-F]{2}){8})|.+)$/
      unless pei&.match?(pattern)
        raise ArgumentError, "invalid value for \"pei\", must conform to the pattern #{pattern}."
      end

      @pei = pei
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        event_list == other.event_list &&
        event_notify_uri == other.event_notify_uri &&
        notify_correlation_id == other.notify_correlation_id &&
        nf_id == other.nf_id &&
        subs_change_notify_uri == other.subs_change_notify_uri &&
        subs_change_notify_correlation_id == other.subs_change_notify_correlation_id &&
        supi == other.supi &&
        group_id == other.group_id &&
        exclude_supi_list == other.exclude_supi_list &&
        exclude_gpsi_list == other.exclude_gpsi_list &&
        include_supi_list == other.include_supi_list &&
        include_gpsi_list == other.include_gpsi_list &&
        gpsi == other.gpsi &&
        pei == other.pei &&
        any_ue == other.any_ue &&
        options == other.options &&
        source_nf_type == other.source_nf_type &&
        term_notify_ind == other.term_notify_ind
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [event_list, event_notify_uri, notify_correlation_id, nf_id, subs_change_notify_uri,
       subs_change_notify_correlation_id, supi, group_id, exclude_supi_list, exclude_gpsi_list, include_supi_list, include_gpsi_list, gpsi, pei, any_ue, options, source_nf_type, term_notify_ind].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash[key.to_s] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash[key.to_s] = attributes[attribute_map[key]].map do |v|
              _deserialize(::Regexp.last_match(1), v)
            end
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash[key.to_s] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Core5g.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
