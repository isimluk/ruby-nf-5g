# frozen_string_literal: true

# #Namf_EventExposure
#
# AMF Event Exposure Service.   Â© 2023, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
#
# The version of the OpenAPI document: 1.3.0-alpha.3
#
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 7.1.0-SNAPSHOT
#

require 'date'
require 'time'

module Core5g
  # Contains a Traffic Descriptor.
  class DddTrafficDescriptor
    # String identifying a IPv4 address formatted in the 'dotted decimal' notation as defined in RFC 1166.
    attr_accessor :ipv4_addr

    attr_accessor :ipv6_addr

    # Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
    attr_accessor :port_number

    # String identifying a MAC address formatted in the hexadecimal notation according to clause 1.1 and clause 2.1 of RFC 7042.
    attr_accessor :mac_addr

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        ipv4_addr: :ipv4Addr,
        ipv6_addr: :ipv6Addr,
        port_number: :portNumber,
        mac_addr: :macAddr
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        ipv4_addr: :String,
        ipv6_addr: :Ipv6Addr,
        port_number: :Integer,
        mac_addr: :String
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      unless attributes.is_a?(Hash)
        raise ArgumentError,
              'The input argument (attributes) must be a hash in `Core5g::DddTrafficDescriptor` initialize method'
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) do |(k, v), h|
        unless self.class.attribute_map.key?(k.to_sym)
          raise ArgumentError,
                "`#{k}` is not a valid attribute in `Core5g::DddTrafficDescriptor`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end

        h[k.to_sym] = v
      end

      self.ipv4_addr = attributes[:ipv4_addr] if attributes.key?(:ipv4_addr)

      self.ipv6_addr = attributes[:ipv6_addr] if attributes.key?(:ipv6_addr)

      self.port_number = attributes[:port_number] if attributes.key?(:port_number)

      return unless attributes.key?(:mac_addr)

      self.mac_addr = attributes[:mac_addr]
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = []
      pattern = /^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$/
      if !@ipv4_addr.nil? && @ipv4_addr !~ pattern
        invalid_properties.push("invalid value for \"ipv4_addr\", must conform to the pattern #{pattern}.")
      end

      if !@port_number.nil? && @port_number.negative?
        invalid_properties.push('invalid value for "port_number", must be greater than or equal to 0.')
      end

      pattern = /^([0-9a-fA-F]{2})((-[0-9a-fA-F]{2}){5})$/
      if !@mac_addr.nil? && @mac_addr !~ pattern
        invalid_properties.push("invalid value for \"mac_addr\", must conform to the pattern #{pattern}.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      if !@ipv4_addr.nil? && @ipv4_addr !~ /^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$/
        return false
      end
      return false if !@port_number.nil? && @port_number.negative?
      return false if !@mac_addr.nil? && @mac_addr !~ /^([0-9a-fA-F]{2})((-[0-9a-fA-F]{2}){5})$/

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] ipv4_addr Value to be assigned
    def ipv4_addr=(ipv4_addr)
      raise ArgumentError, 'ipv4_addr cannot be nil' if ipv4_addr.nil?

      pattern = /^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$/
      unless ipv4_addr&.match?(pattern)
        raise ArgumentError, "invalid value for \"ipv4_addr\", must conform to the pattern #{pattern}."
      end

      @ipv4_addr = ipv4_addr
    end

    # Custom attribute writer method with validation
    # @param [Object] port_number Value to be assigned
    def port_number=(port_number)
      raise ArgumentError, 'port_number cannot be nil' if port_number.nil?

      if port_number.negative?
        raise ArgumentError, 'invalid value for "port_number", must be greater than or equal to 0.'
      end

      @port_number = port_number
    end

    # Custom attribute writer method with validation
    # @param [Object] mac_addr Value to be assigned
    def mac_addr=(mac_addr)
      raise ArgumentError, 'mac_addr cannot be nil' if mac_addr.nil?

      pattern = /^([0-9a-fA-F]{2})((-[0-9a-fA-F]{2}){5})$/
      unless mac_addr&.match?(pattern)
        raise ArgumentError, "invalid value for \"mac_addr\", must conform to the pattern #{pattern}."
      end

      @mac_addr = mac_addr
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        ipv4_addr == other.ipv4_addr &&
        ipv6_addr == other.ipv6_addr &&
        port_number == other.port_number &&
        mac_addr == other.mac_addr
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [ipv4_addr, ipv6_addr, port_number, mac_addr].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash[key.to_s] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash[key.to_s] = attributes[attribute_map[key]].map do |v|
              _deserialize(::Regexp.last_match(1), v)
            end
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash[key.to_s] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Core5g.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
