# frozen_string_literal: true

# #Namf_EventExposure
#
# AMF Event Exposure Service.   Â© 2023, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
#
# The version of the OpenAPI document: 1.3.0-alpha.3
#
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 7.1.0-SNAPSHOT
#

require 'date'
require 'time'

module Core5g
  # Contains the Non-3GPP access user location.
  class N3gaLocation
    attr_accessor :n3gpp_tai, :ue_ipv6_addr, :protocol, :tnap_id, :twap_id, :hfc_node_id, :w5gban_line_type

    # This IE shall contain the N3IWF identifier received over NGAP and shall be encoded as a  string of hexadecimal characters. Each character in the string shall take a value of \"0\"  to \"9\", \"a\" to \"f\" or \"A\" to \"F\" and shall represent 4 bits. The most significant  character representing the 4 most significant bits of the N3IWF ID shall appear first in  the string, and the character representing the 4 least significant bit of the N3IWF ID  shall appear last in the string.
    attr_accessor :n3_iwf_id

    # String identifying a IPv4 address formatted in the 'dotted decimal' notation as defined in RFC 1166.
    attr_accessor :ue_ipv4_addr

    # Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
    attr_accessor :port_number

    # string with format 'bytes' as defined in OpenAPI
    attr_accessor :gli

    # Global Cable Identifier uniquely identifying the connection between the 5G-CRG or FN-CRG to the 5GS. See clause 28.15.4 of 3GPP TS 23.003. This shall be encoded as a string per clause 28.15.4 of 3GPP TS 23.003, and compliant with the syntax specified  in clause 2.2  of IETF RFC 7542 for the username part of a NAI. The GCI value is specified in CableLabs WR-TR-5WWC-ARCH.
    attr_accessor :gci

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        n3gpp_tai: :n3gppTai,
        n3_iwf_id: :n3IwfId,
        ue_ipv4_addr: :ueIpv4Addr,
        ue_ipv6_addr: :ueIpv6Addr,
        port_number: :portNumber,
        protocol: :protocol,
        tnap_id: :tnapId,
        twap_id: :twapId,
        hfc_node_id: :hfcNodeId,
        gli: :gli,
        w5gban_line_type: :w5gbanLineType,
        gci: :gci
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        n3gpp_tai: :Tai,
        n3_iwf_id: :String,
        ue_ipv4_addr: :String,
        ue_ipv6_addr: :Ipv6Addr,
        port_number: :Integer,
        protocol: :TransportProtocol,
        tnap_id: :TnapId,
        twap_id: :TwapId,
        hfc_node_id: :HfcNodeId,
        gli: :String,
        w5gban_line_type: :LineType,
        gci: :String
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      unless attributes.is_a?(Hash)
        raise ArgumentError,
              'The input argument (attributes) must be a hash in `Core5g::N3gaLocation` initialize method'
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) do |(k, v), h|
        unless self.class.attribute_map.key?(k.to_sym)
          raise ArgumentError,
                "`#{k}` is not a valid attribute in `Core5g::N3gaLocation`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end

        h[k.to_sym] = v
      end

      self.n3gpp_tai = attributes[:n3gpp_tai] if attributes.key?(:n3gpp_tai)

      self.n3_iwf_id = attributes[:n3_iwf_id] if attributes.key?(:n3_iwf_id)

      self.ue_ipv4_addr = attributes[:ue_ipv4_addr] if attributes.key?(:ue_ipv4_addr)

      self.ue_ipv6_addr = attributes[:ue_ipv6_addr] if attributes.key?(:ue_ipv6_addr)

      self.port_number = attributes[:port_number] if attributes.key?(:port_number)

      self.protocol = attributes[:protocol] if attributes.key?(:protocol)

      self.tnap_id = attributes[:tnap_id] if attributes.key?(:tnap_id)

      self.twap_id = attributes[:twap_id] if attributes.key?(:twap_id)

      self.hfc_node_id = attributes[:hfc_node_id] if attributes.key?(:hfc_node_id)

      self.gli = attributes[:gli] if attributes.key?(:gli)

      self.w5gban_line_type = attributes[:w5gban_line_type] if attributes.key?(:w5gban_line_type)

      return unless attributes.key?(:gci)

      self.gci = attributes[:gci]
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = []
      pattern = /^[A-Fa-f0-9]+$/
      if !@n3_iwf_id.nil? && @n3_iwf_id !~ pattern
        invalid_properties.push("invalid value for \"n3_iwf_id\", must conform to the pattern #{pattern}.")
      end

      pattern = /^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$/
      if !@ue_ipv4_addr.nil? && @ue_ipv4_addr !~ pattern
        invalid_properties.push("invalid value for \"ue_ipv4_addr\", must conform to the pattern #{pattern}.")
      end

      if !@port_number.nil? && @port_number.negative?
        invalid_properties.push('invalid value for "port_number", must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@n3_iwf_id.nil? && @n3_iwf_id !~ /^[A-Fa-f0-9]+$/
      if !@ue_ipv4_addr.nil? && @ue_ipv4_addr !~ /^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$/
        return false
      end
      return false if !@port_number.nil? && @port_number.negative?

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] n3_iwf_id Value to be assigned
    def n3_iwf_id=(n3_iwf_id)
      raise ArgumentError, 'n3_iwf_id cannot be nil' if n3_iwf_id.nil?

      pattern = /^[A-Fa-f0-9]+$/
      unless n3_iwf_id&.match?(pattern)
        raise ArgumentError, "invalid value for \"n3_iwf_id\", must conform to the pattern #{pattern}."
      end

      @n3_iwf_id = n3_iwf_id
    end

    # Custom attribute writer method with validation
    # @param [Object] ue_ipv4_addr Value to be assigned
    def ue_ipv4_addr=(ue_ipv4_addr)
      raise ArgumentError, 'ue_ipv4_addr cannot be nil' if ue_ipv4_addr.nil?

      pattern = /^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$/
      unless ue_ipv4_addr&.match?(pattern)
        raise ArgumentError, "invalid value for \"ue_ipv4_addr\", must conform to the pattern #{pattern}."
      end

      @ue_ipv4_addr = ue_ipv4_addr
    end

    # Custom attribute writer method with validation
    # @param [Object] port_number Value to be assigned
    def port_number=(port_number)
      raise ArgumentError, 'port_number cannot be nil' if port_number.nil?

      if port_number.negative?
        raise ArgumentError, 'invalid value for "port_number", must be greater than or equal to 0.'
      end

      @port_number = port_number
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        n3gpp_tai == other.n3gpp_tai &&
        n3_iwf_id == other.n3_iwf_id &&
        ue_ipv4_addr == other.ue_ipv4_addr &&
        ue_ipv6_addr == other.ue_ipv6_addr &&
        port_number == other.port_number &&
        protocol == other.protocol &&
        tnap_id == other.tnap_id &&
        twap_id == other.twap_id &&
        hfc_node_id == other.hfc_node_id &&
        gli == other.gli &&
        w5gban_line_type == other.w5gban_line_type &&
        gci == other.gci
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [n3gpp_tai, n3_iwf_id, ue_ipv4_addr, ue_ipv6_addr, port_number, protocol, tnap_id, twap_id, hfc_node_id, gli,
       w5gban_line_type, gci].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash[key.to_s] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash[key.to_s] = attributes[attribute_map[key]].map do |v|
              _deserialize(::Regexp.last_match(1), v)
            end
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash[key.to_s] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Core5g.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
