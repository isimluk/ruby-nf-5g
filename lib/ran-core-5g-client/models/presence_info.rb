# frozen_string_literal: true

# #Namf_EventExposure
#
# AMF Event Exposure Service.   Â© 2023, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
#
# The version of the OpenAPI document: 1.3.0-alpha.3
#
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 7.1.0-SNAPSHOT
#

require 'date'
require 'time'

module Core5g
  # If the additionalPraId IE is present, this IE shall state the presence information of the UE for the individual PRA identified by the additionalPraId IE;  If the additionalPraId IE is not present, this IE shall state the presence information of the UE for the PRA identified by the praId IE.
  class PresenceInfo
    # Represents an identifier of the Presence Reporting Area (see clause 28.10 of 3GPP  TS 23.003.  This IE shall be present  if the Area of Interest subscribed or reported is a Presence Reporting Area or a Set of Core Network predefined Presence Reporting Areas. When present, it shall be encoded as a string representing an integer in the following ranges: 0 to 8 388 607 for UE-dedicated PRA 8 388 608 to 16 777 215 for Core Network predefined PRA Examples: PRA ID 123 is encoded as \"123\" PRA ID 11 238 660 is encoded as \"11238660\"
    attr_accessor :pra_id

    # This IE may be present if the praId IE is present and if it contains a PRA identifier referring to a set of Core Network predefined Presence Reporting Areas. When present, this IE shall contain a PRA Identifier of an individual PRA within the Set of Core Network predefined Presence Reporting Areas indicated by the praId IE.
    attr_accessor :additional_pra_id

    attr_accessor :presence_state

    # Represents the list of tracking areas that constitutes the area. This IE shall be present if the subscription or  the event report is for tracking UE presence in the tracking areas. For non 3GPP access the TAI shall be the N3GPP TAI.
    attr_accessor :tracking_area_list

    # Represents the list of EUTRAN cell Ids that constitutes the area. This IE shall be present if the Area of Interest subscribed is a list of EUTRAN cell Ids.
    attr_accessor :ecgi_list

    # Represents the list of NR cell Ids that constitutes the area. This IE shall be present if the Area of Interest subscribed is a list of NR cell Ids.
    attr_accessor :ncgi_list

    # Represents the list of NG RAN node identifiers that constitutes the area. This IE shall be present if the Area of Interest subscribed is a list of NG RAN node identifiers.
    attr_accessor :global_ran_node_id_list

    # Represents the list of eNodeB identifiers that constitutes the area. This IE shall be  present if the Area of Interest subscribed is a list of eNodeB identifiers.
    attr_accessor :globale_nb_id_list

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        pra_id: :praId,
        additional_pra_id: :additionalPraId,
        presence_state: :presenceState,
        tracking_area_list: :trackingAreaList,
        ecgi_list: :ecgiList,
        ncgi_list: :ncgiList,
        global_ran_node_id_list: :globalRanNodeIdList,
        globale_nb_id_list: :globaleNbIdList
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        pra_id: :String,
        additional_pra_id: :String,
        presence_state: :PresenceState,
        tracking_area_list: :'Array<Tai>',
        ecgi_list: :'Array<Ecgi>',
        ncgi_list: :'Array<Ncgi>',
        global_ran_node_id_list: :'Array<GlobalRanNodeId>',
        globale_nb_id_list: :'Array<GlobalRanNodeId>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      unless attributes.is_a?(Hash)
        raise ArgumentError,
              'The input argument (attributes) must be a hash in `Core5g::PresenceInfo` initialize method'
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) do |(k, v), h|
        unless self.class.attribute_map.key?(k.to_sym)
          raise ArgumentError,
                "`#{k}` is not a valid attribute in `Core5g::PresenceInfo`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end

        h[k.to_sym] = v
      end

      self.pra_id = attributes[:pra_id] if attributes.key?(:pra_id)

      self.additional_pra_id = attributes[:additional_pra_id] if attributes.key?(:additional_pra_id)

      self.presence_state = attributes[:presence_state] if attributes.key?(:presence_state)

      if attributes.key?(:tracking_area_list) && (value = attributes[:tracking_area_list]).is_a?(Array)
        self.tracking_area_list = value
      end

      if attributes.key?(:ecgi_list) && (value = attributes[:ecgi_list]).is_a?(Array)
        self.ecgi_list = value
      end

      if attributes.key?(:ncgi_list) && (value = attributes[:ncgi_list]).is_a?(Array)
        self.ncgi_list = value
      end

      if attributes.key?(:global_ran_node_id_list) && (value = attributes[:global_ran_node_id_list]).is_a?(Array)
        self.global_ran_node_id_list = value
      end

      return unless attributes.key?(:globale_nb_id_list)
      return unless (value = attributes[:globale_nb_id_list]).is_a?(Array)

      self.globale_nb_id_list = value
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = []
      if !@tracking_area_list.nil? && @tracking_area_list.empty?
        invalid_properties.push('invalid value for "tracking_area_list", number of items must be greater than or equal to 1.')
      end

      if !@ecgi_list.nil? && @ecgi_list.empty?
        invalid_properties.push('invalid value for "ecgi_list", number of items must be greater than or equal to 1.')
      end

      if !@ncgi_list.nil? && @ncgi_list.empty?
        invalid_properties.push('invalid value for "ncgi_list", number of items must be greater than or equal to 1.')
      end

      if !@global_ran_node_id_list.nil? && @global_ran_node_id_list.empty?
        invalid_properties.push('invalid value for "global_ran_node_id_list", number of items must be greater than or equal to 1.')
      end

      if !@globale_nb_id_list.nil? && @globale_nb_id_list.empty?
        invalid_properties.push('invalid value for "globale_nb_id_list", number of items must be greater than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@tracking_area_list.nil? && @tracking_area_list.empty?
      return false if !@ecgi_list.nil? && @ecgi_list.empty?
      return false if !@ncgi_list.nil? && @ncgi_list.empty?
      return false if !@global_ran_node_id_list.nil? && @global_ran_node_id_list.empty?
      return false if !@globale_nb_id_list.nil? && @globale_nb_id_list.empty?

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] tracking_area_list Value to be assigned
    def tracking_area_list=(tracking_area_list)
      raise ArgumentError, 'tracking_area_list cannot be nil' if tracking_area_list.nil?

      if tracking_area_list.empty?
        raise ArgumentError,
              'invalid value for "tracking_area_list", number of items must be greater than or equal to 1.'
      end

      @tracking_area_list = tracking_area_list
    end

    # Custom attribute writer method with validation
    # @param [Object] ecgi_list Value to be assigned
    def ecgi_list=(ecgi_list)
      raise ArgumentError, 'ecgi_list cannot be nil' if ecgi_list.nil?

      if ecgi_list.empty?
        raise ArgumentError, 'invalid value for "ecgi_list", number of items must be greater than or equal to 1.'
      end

      @ecgi_list = ecgi_list
    end

    # Custom attribute writer method with validation
    # @param [Object] ncgi_list Value to be assigned
    def ncgi_list=(ncgi_list)
      raise ArgumentError, 'ncgi_list cannot be nil' if ncgi_list.nil?

      if ncgi_list.empty?
        raise ArgumentError, 'invalid value for "ncgi_list", number of items must be greater than or equal to 1.'
      end

      @ncgi_list = ncgi_list
    end

    # Custom attribute writer method with validation
    # @param [Object] global_ran_node_id_list Value to be assigned
    def global_ran_node_id_list=(global_ran_node_id_list)
      raise ArgumentError, 'global_ran_node_id_list cannot be nil' if global_ran_node_id_list.nil?

      if global_ran_node_id_list.empty?
        raise ArgumentError,
              'invalid value for "global_ran_node_id_list", number of items must be greater than or equal to 1.'
      end

      @global_ran_node_id_list = global_ran_node_id_list
    end

    # Custom attribute writer method with validation
    # @param [Object] globale_nb_id_list Value to be assigned
    def globale_nb_id_list=(globale_nb_id_list)
      raise ArgumentError, 'globale_nb_id_list cannot be nil' if globale_nb_id_list.nil?

      if globale_nb_id_list.empty?
        raise ArgumentError,
              'invalid value for "globale_nb_id_list", number of items must be greater than or equal to 1.'
      end

      @globale_nb_id_list = globale_nb_id_list
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        pra_id == other.pra_id &&
        additional_pra_id == other.additional_pra_id &&
        presence_state == other.presence_state &&
        tracking_area_list == other.tracking_area_list &&
        ecgi_list == other.ecgi_list &&
        ncgi_list == other.ncgi_list &&
        global_ran_node_id_list == other.global_ran_node_id_list &&
        globale_nb_id_list == other.globale_nb_id_list
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [pra_id, additional_pra_id, presence_state, tracking_area_list, ecgi_list, ncgi_list, global_ran_node_id_list,
       globale_nb_id_list].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash[key.to_s] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash[key.to_s] = attributes[attribute_map[key]].map do |v|
              _deserialize(::Regexp.last_match(1), v)
            end
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash[key.to_s] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Core5g.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
