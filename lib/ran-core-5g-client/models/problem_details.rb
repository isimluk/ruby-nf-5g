# frozen_string_literal: true

# #Namf_EventExposure
#
# AMF Event Exposure Service.   © 2023, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
#
# The version of the OpenAPI document: 1.3.0-alpha.3
#
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 7.1.0-SNAPSHOT
#

require 'date'
require 'time'

module Core5g
  # Provides additional information in an error response.
  class ProblemDetails
    # String providing an URI formatted according to RFC 3986.
    attr_accessor :type

    attr_accessor :title, :status, :invalid_params, :access_token_error, :access_token_request, :supported_api_versions

    # A human-readable explanation specific to this occurrence of the problem.
    attr_accessor :detail

    # String providing an URI formatted according to RFC 3986.
    attr_accessor :instance

    # A machine-readable application error cause specific to this occurrence of the problem.  This IE should be present and provide application-related error information, if available.
    attr_accessor :cause

    # A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported.
    attr_accessor :supported_features

    # Fully Qualified Domain Name
    attr_accessor :nrf_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        type: :type,
        title: :title,
        status: :status,
        detail: :detail,
        instance: :instance,
        cause: :cause,
        invalid_params: :invalidParams,
        supported_features: :supportedFeatures,
        access_token_error: :accessTokenError,
        access_token_request: :accessTokenRequest,
        nrf_id: :nrfId,
        supported_api_versions: :supportedApiVersions
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        type: :String,
        title: :String,
        status: :Integer,
        detail: :String,
        instance: :String,
        cause: :String,
        invalid_params: :'Array<InvalidParam>',
        supported_features: :String,
        access_token_error: :AccessTokenErr,
        access_token_request: :AccessTokenReq,
        nrf_id: :String,
        supported_api_versions: :'Array<String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      unless attributes.is_a?(Hash)
        raise ArgumentError,
              'The input argument (attributes) must be a hash in `Core5g::ProblemDetails` initialize method'
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) do |(k, v), h|
        unless self.class.attribute_map.key?(k.to_sym)
          raise ArgumentError,
                "`#{k}` is not a valid attribute in `Core5g::ProblemDetails`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end

        h[k.to_sym] = v
      end

      self.type = attributes[:type] if attributes.key?(:type)

      self.title = attributes[:title] if attributes.key?(:title)

      self.status = attributes[:status] if attributes.key?(:status)

      self.detail = attributes[:detail] if attributes.key?(:detail)

      self.instance = attributes[:instance] if attributes.key?(:instance)

      self.cause = attributes[:cause] if attributes.key?(:cause)

      if attributes.key?(:invalid_params) && (value = attributes[:invalid_params]).is_a?(Array)
        self.invalid_params = value
      end

      self.supported_features = attributes[:supported_features] if attributes.key?(:supported_features)

      self.access_token_error = attributes[:access_token_error] if attributes.key?(:access_token_error)

      self.access_token_request = attributes[:access_token_request] if attributes.key?(:access_token_request)

      self.nrf_id = attributes[:nrf_id] if attributes.key?(:nrf_id)

      return unless attributes.key?(:supported_api_versions)
      return unless (value = attributes[:supported_api_versions]).is_a?(Array)

      self.supported_api_versions = value
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = []
      if !@invalid_params.nil? && @invalid_params.empty?
        invalid_properties.push('invalid value for "invalid_params", number of items must be greater than or equal to 1.')
      end

      pattern = /^[A-Fa-f0-9]*$/
      if !@supported_features.nil? && @supported_features !~ pattern
        invalid_properties.push("invalid value for \"supported_features\", must conform to the pattern #{pattern}.")
      end

      if !@nrf_id.nil? && @nrf_id.to_s.length > 253
        invalid_properties.push('invalid value for "nrf_id", the character length must be smaller than or equal to 253.')
      end

      if !@nrf_id.nil? && @nrf_id.to_s.length < 4
        invalid_properties.push('invalid value for "nrf_id", the character length must be great than or equal to 4.')
      end

      pattern = /^([0-9A-Za-z]([-0-9A-Za-z]{0,61}[0-9A-Za-z])?\.)+[A-Za-z]{2,63}\.?$/
      if !@nrf_id.nil? && @nrf_id !~ pattern
        invalid_properties.push("invalid value for \"nrf_id\", must conform to the pattern #{pattern}.")
      end

      if !@supported_api_versions.nil? && @supported_api_versions.empty?
        invalid_properties.push('invalid value for "supported_api_versions", number of items must be greater than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@invalid_params.nil? && @invalid_params.empty?
      return false if !@supported_features.nil? && @supported_features !~ /^[A-Fa-f0-9]*$/
      return false if !@nrf_id.nil? && @nrf_id.to_s.length > 253
      return false if !@nrf_id.nil? && @nrf_id.to_s.length < 4
      return false if !@nrf_id.nil? && @nrf_id !~ /^([0-9A-Za-z]([-0-9A-Za-z]{0,61}[0-9A-Za-z])?\.)+[A-Za-z]{2,63}\.?$/
      return false if !@supported_api_versions.nil? && @supported_api_versions.empty?

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] invalid_params Value to be assigned
    def invalid_params=(invalid_params)
      raise ArgumentError, 'invalid_params cannot be nil' if invalid_params.nil?

      if invalid_params.empty?
        raise ArgumentError, 'invalid value for "invalid_params", number of items must be greater than or equal to 1.'
      end

      @invalid_params = invalid_params
    end

    # Custom attribute writer method with validation
    # @param [Object] supported_features Value to be assigned
    def supported_features=(supported_features)
      raise ArgumentError, 'supported_features cannot be nil' if supported_features.nil?

      pattern = /^[A-Fa-f0-9]*$/
      unless supported_features&.match?(pattern)
        raise ArgumentError, "invalid value for \"supported_features\", must conform to the pattern #{pattern}."
      end

      @supported_features = supported_features
    end

    # Custom attribute writer method with validation
    # @param [Object] nrf_id Value to be assigned
    def nrf_id=(nrf_id)
      raise ArgumentError, 'nrf_id cannot be nil' if nrf_id.nil?

      if nrf_id.to_s.length > 253
        raise ArgumentError, 'invalid value for "nrf_id", the character length must be smaller than or equal to 253.'
      end

      if nrf_id.to_s.length < 4
        raise ArgumentError, 'invalid value for "nrf_id", the character length must be great than or equal to 4.'
      end

      pattern = /^([0-9A-Za-z]([-0-9A-Za-z]{0,61}[0-9A-Za-z])?\.)+[A-Za-z]{2,63}\.?$/
      unless nrf_id&.match?(pattern)
        raise ArgumentError, "invalid value for \"nrf_id\", must conform to the pattern #{pattern}."
      end

      @nrf_id = nrf_id
    end

    # Custom attribute writer method with validation
    # @param [Object] supported_api_versions Value to be assigned
    def supported_api_versions=(supported_api_versions)
      raise ArgumentError, 'supported_api_versions cannot be nil' if supported_api_versions.nil?

      if supported_api_versions.empty?
        raise ArgumentError,
              'invalid value for "supported_api_versions", number of items must be greater than or equal to 1.'
      end

      @supported_api_versions = supported_api_versions
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        type == other.type &&
        title == other.title &&
        status == other.status &&
        detail == other.detail &&
        instance == other.instance &&
        cause == other.cause &&
        invalid_params == other.invalid_params &&
        supported_features == other.supported_features &&
        access_token_error == other.access_token_error &&
        access_token_request == other.access_token_request &&
        nrf_id == other.nrf_id &&
        supported_api_versions == other.supported_api_versions
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [type, title, status, detail, instance, cause, invalid_params, supported_features, access_token_error,
       access_token_request, nrf_id, supported_api_versions].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash[key.to_s] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash[key.to_s] = attributes[attribute_map[key]].map do |v|
              _deserialize(::Regexp.last_match(1), v)
            end
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash[key.to_s] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Core5g.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
