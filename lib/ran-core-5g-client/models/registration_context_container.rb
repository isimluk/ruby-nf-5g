# frozen_string_literal: true

# #Namf_Communication
#
# AMF Communication Service Â© 2019, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
#
# The version of the OpenAPI document: 1.0.2
#
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 7.1.0-SNAPSHOT
#

require 'date'
require 'time'

module Core5g
  class RegistrationContextContainer
    attr_accessor :ue_context, :local_time_zone, :an_type, :an_n2_ap_id, :ran_node_id, :initial_amf_name,
                  :user_location, :rrc_est_cause, :ue_context_request, :an_n2_ipv4_addr, :an_n2_ipv6_addr, :allowed_nssai, :configured_nssai, :rejected_nssai_in_plmn, :rejected_nssai_in_ta

    class EnumAttributeValidator
      attr_reader :datatype, :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        ue_context: :ueContext,
        local_time_zone: :localTimeZone,
        an_type: :anType,
        an_n2_ap_id: :anN2ApId,
        ran_node_id: :ranNodeId,
        initial_amf_name: :initialAmfName,
        user_location: :userLocation,
        rrc_est_cause: :rrcEstCause,
        ue_context_request: :ueContextRequest,
        an_n2_ipv4_addr: :anN2IPv4Addr,
        an_n2_ipv6_addr: :anN2IPv6Addr,
        allowed_nssai: :allowedNssai,
        configured_nssai: :configuredNssai,
        rejected_nssai_in_plmn: :rejectedNssaiInPlmn,
        rejected_nssai_in_ta: :rejectedNssaiInTa
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        ue_context: :UeContext,
        local_time_zone: :String,
        an_type: :AccessType,
        an_n2_ap_id: :Integer,
        ran_node_id: :GlobalRanNodeId,
        initial_amf_name: :String,
        user_location: :UserLocation,
        rrc_est_cause: :String,
        ue_context_request: :Boolean,
        an_n2_ipv4_addr: :String,
        an_n2_ipv6_addr: :Ipv6Addr,
        allowed_nssai: :AllowedNssai,
        configured_nssai: :'Array<ConfiguredSnssai>',
        rejected_nssai_in_plmn: :'Array<Snssai>',
        rejected_nssai_in_ta: :'Array<Snssai>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
                :ran_node_id
              ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      unless attributes.is_a?(Hash)
        raise ArgumentError,
              'The input argument (attributes) must be a hash in `Core5g::RegistrationContextContainer` initialize method'
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) do |(k, v), h|
        unless self.class.attribute_map.key?(k.to_sym)
          raise ArgumentError,
                "`#{k}` is not a valid attribute in `Core5g::RegistrationContextContainer`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end

        h[k.to_sym] = v
      end

      self.ue_context = (attributes[:ue_context] if attributes.key?(:ue_context))

      self.local_time_zone = attributes[:local_time_zone] if attributes.key?(:local_time_zone)

      self.an_type = (attributes[:an_type] if attributes.key?(:an_type))

      self.an_n2_ap_id = (attributes[:an_n2_ap_id] if attributes.key?(:an_n2_ap_id))

      self.ran_node_id = (attributes[:ran_node_id] if attributes.key?(:ran_node_id))

      self.initial_amf_name = (attributes[:initial_amf_name] if attributes.key?(:initial_amf_name))

      self.user_location = (attributes[:user_location] if attributes.key?(:user_location))

      self.rrc_est_cause = attributes[:rrc_est_cause] if attributes.key?(:rrc_est_cause)

      self.ue_context_request = if attributes.key?(:ue_context_request)
                                  attributes[:ue_context_request]
                                else
                                  false
                                end

      self.an_n2_ipv4_addr = attributes[:an_n2_ipv4_addr] if attributes.key?(:an_n2_ipv4_addr)

      self.an_n2_ipv6_addr = attributes[:an_n2_ipv6_addr] if attributes.key?(:an_n2_ipv6_addr)

      self.allowed_nssai = attributes[:allowed_nssai] if attributes.key?(:allowed_nssai)

      if attributes.key?(:configured_nssai) && (value = attributes[:configured_nssai]).is_a?(Array)
        self.configured_nssai = value
      end

      if attributes.key?(:rejected_nssai_in_plmn) && (value = attributes[:rejected_nssai_in_plmn]).is_a?(Array)
        self.rejected_nssai_in_plmn = value
      end

      return unless attributes.key?(:rejected_nssai_in_ta)
      return unless (value = attributes[:rejected_nssai_in_ta]).is_a?(Array)

      self.rejected_nssai_in_ta = value
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = []
      invalid_properties.push('invalid value for "ue_context", ue_context cannot be nil.') if @ue_context.nil?

      invalid_properties.push('invalid value for "an_type", an_type cannot be nil.') if @an_type.nil?

      invalid_properties.push('invalid value for "an_n2_ap_id", an_n2_ap_id cannot be nil.') if @an_n2_ap_id.nil?

      if @initial_amf_name.nil?
        invalid_properties.push('invalid value for "initial_amf_name", initial_amf_name cannot be nil.')
      end

      invalid_properties.push('invalid value for "user_location", user_location cannot be nil.') if @user_location.nil?

      pattern = /^[0-9a-fA-F]+$/
      if !@rrc_est_cause.nil? && @rrc_est_cause !~ pattern
        invalid_properties.push("invalid value for \"rrc_est_cause\", must conform to the pattern #{pattern}.")
      end

      pattern = /^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$/
      if !@an_n2_ipv4_addr.nil? && @an_n2_ipv4_addr !~ pattern
        invalid_properties.push("invalid value for \"an_n2_ipv4_addr\", must conform to the pattern #{pattern}.")
      end

      if !@configured_nssai.nil? && @configured_nssai.empty?
        invalid_properties.push('invalid value for "configured_nssai", number of items must be greater than or equal to 1.')
      end

      if !@rejected_nssai_in_plmn.nil? && @rejected_nssai_in_plmn.empty?
        invalid_properties.push('invalid value for "rejected_nssai_in_plmn", number of items must be greater than or equal to 1.')
      end

      if !@rejected_nssai_in_ta.nil? && @rejected_nssai_in_ta.empty?
        invalid_properties.push('invalid value for "rejected_nssai_in_ta", number of items must be greater than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @ue_context.nil?
      return false if @an_type.nil?
      return false if @an_n2_ap_id.nil?
      return false if @initial_amf_name.nil?
      return false if @user_location.nil?
      return false if !@rrc_est_cause.nil? && @rrc_est_cause !~ /^[0-9a-fA-F]+$/
      if !@an_n2_ipv4_addr.nil? && @an_n2_ipv4_addr !~ /^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$/
        return false
      end
      return false if !@configured_nssai.nil? && @configured_nssai.empty?
      return false if !@rejected_nssai_in_plmn.nil? && @rejected_nssai_in_plmn.empty?
      return false if !@rejected_nssai_in_ta.nil? && @rejected_nssai_in_ta.empty?

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] rrc_est_cause Value to be assigned
    def rrc_est_cause=(rrc_est_cause)
      raise ArgumentError, 'rrc_est_cause cannot be nil' if rrc_est_cause.nil?

      pattern = /^[0-9a-fA-F]+$/
      unless rrc_est_cause&.match?(pattern)
        raise ArgumentError, "invalid value for \"rrc_est_cause\", must conform to the pattern #{pattern}."
      end

      @rrc_est_cause = rrc_est_cause
    end

    # Custom attribute writer method with validation
    # @param [Object] an_n2_ipv4_addr Value to be assigned
    def an_n2_ipv4_addr=(an_n2_ipv4_addr)
      raise ArgumentError, 'an_n2_ipv4_addr cannot be nil' if an_n2_ipv4_addr.nil?

      pattern = /^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$/
      unless an_n2_ipv4_addr&.match?(pattern)
        raise ArgumentError, "invalid value for \"an_n2_ipv4_addr\", must conform to the pattern #{pattern}."
      end

      @an_n2_ipv4_addr = an_n2_ipv4_addr
    end

    # Custom attribute writer method with validation
    # @param [Object] configured_nssai Value to be assigned
    def configured_nssai=(configured_nssai)
      raise ArgumentError, 'configured_nssai cannot be nil' if configured_nssai.nil?

      if configured_nssai.empty?
        raise ArgumentError, 'invalid value for "configured_nssai", number of items must be greater than or equal to 1.'
      end

      @configured_nssai = configured_nssai
    end

    # Custom attribute writer method with validation
    # @param [Object] rejected_nssai_in_plmn Value to be assigned
    def rejected_nssai_in_plmn=(rejected_nssai_in_plmn)
      raise ArgumentError, 'rejected_nssai_in_plmn cannot be nil' if rejected_nssai_in_plmn.nil?

      if rejected_nssai_in_plmn.empty?
        raise ArgumentError,
              'invalid value for "rejected_nssai_in_plmn", number of items must be greater than or equal to 1.'
      end

      @rejected_nssai_in_plmn = rejected_nssai_in_plmn
    end

    # Custom attribute writer method with validation
    # @param [Object] rejected_nssai_in_ta Value to be assigned
    def rejected_nssai_in_ta=(rejected_nssai_in_ta)
      raise ArgumentError, 'rejected_nssai_in_ta cannot be nil' if rejected_nssai_in_ta.nil?

      if rejected_nssai_in_ta.empty?
        raise ArgumentError,
              'invalid value for "rejected_nssai_in_ta", number of items must be greater than or equal to 1.'
      end

      @rejected_nssai_in_ta = rejected_nssai_in_ta
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        ue_context == other.ue_context &&
        local_time_zone == other.local_time_zone &&
        an_type == other.an_type &&
        an_n2_ap_id == other.an_n2_ap_id &&
        ran_node_id == other.ran_node_id &&
        initial_amf_name == other.initial_amf_name &&
        user_location == other.user_location &&
        rrc_est_cause == other.rrc_est_cause &&
        ue_context_request == other.ue_context_request &&
        an_n2_ipv4_addr == other.an_n2_ipv4_addr &&
        an_n2_ipv6_addr == other.an_n2_ipv6_addr &&
        allowed_nssai == other.allowed_nssai &&
        configured_nssai == other.configured_nssai &&
        rejected_nssai_in_plmn == other.rejected_nssai_in_plmn &&
        rejected_nssai_in_ta == other.rejected_nssai_in_ta
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [ue_context, local_time_zone, an_type, an_n2_ap_id, ran_node_id, initial_amf_name, user_location, rrc_est_cause,
       ue_context_request, an_n2_ipv4_addr, an_n2_ipv6_addr, allowed_nssai, configured_nssai, rejected_nssai_in_plmn, rejected_nssai_in_ta].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash[key.to_s] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash[key.to_s] = attributes[attribute_map[key]].map do |v|
              _deserialize(::Regexp.last_match(1), v)
            end
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash[key.to_s] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Core5g.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
