# frozen_string_literal: true

# #Namf_Communication
#
# AMF Communication Service Â© 2019, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
#
# The version of the OpenAPI document: 1.0.2
#
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 7.1.0-SNAPSHOT
#

require 'date'
require 'time'

module Core5g
  class UeContext
    attr_accessor :supi, :supi_unauth_ind, :gpsi_list, :pei, :udm_group_id, :ausf_group_id, :routing_indicator,
                  :group_list, :drx_parameter, :sub_rfsp, :used_rfsp, :sub_ue_ambr, :sms_support, :smsf_id, :seaf_data, :_5g_mm_capability, :pcf_id, :pcf_am_policy_uri, :am_policy_req_trigger_list, :pcf_ue_policy_uri, :ue_policy_req_trigger_list, :hpcf_id, :restricted_rat_list, :forbidden_area_list, :service_area_restriction, :restricted_core_nw_type_list, :event_subscription_list, :mm_context_list, :session_context_list, :trace_data

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        supi: :supi,
        supi_unauth_ind: :supiUnauthInd,
        gpsi_list: :gpsiList,
        pei: :pei,
        udm_group_id: :udmGroupId,
        ausf_group_id: :ausfGroupId,
        routing_indicator: :routingIndicator,
        group_list: :groupList,
        drx_parameter: :drxParameter,
        sub_rfsp: :subRfsp,
        used_rfsp: :usedRfsp,
        sub_ue_ambr: :subUeAmbr,
        sms_support: :smsSupport,
        smsf_id: :smsfId,
        seaf_data: :seafData,
        _5g_mm_capability: :'5gMmCapability',
        pcf_id: :pcfId,
        pcf_am_policy_uri: :pcfAmPolicyUri,
        am_policy_req_trigger_list: :amPolicyReqTriggerList,
        pcf_ue_policy_uri: :pcfUePolicyUri,
        ue_policy_req_trigger_list: :uePolicyReqTriggerList,
        hpcf_id: :hpcfId,
        restricted_rat_list: :restrictedRatList,
        forbidden_area_list: :forbiddenAreaList,
        service_area_restriction: :serviceAreaRestriction,
        restricted_core_nw_type_list: :restrictedCoreNwTypeList,
        event_subscription_list: :eventSubscriptionList,
        mm_context_list: :mmContextList,
        session_context_list: :sessionContextList,
        trace_data: :traceData
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        supi: :String,
        supi_unauth_ind: :Boolean,
        gpsi_list: :'Array<String>',
        pei: :String,
        udm_group_id: :String,
        ausf_group_id: :String,
        routing_indicator: :String,
        group_list: :'Array<String>',
        drx_parameter: :Object,
        sub_rfsp: :Integer,
        used_rfsp: :Integer,
        sub_ue_ambr: :Ambr,
        sms_support: :SmsSupport,
        smsf_id: :String,
        seaf_data: :SeafData,
        _5g_mm_capability: :Object,
        pcf_id: :String,
        pcf_am_policy_uri: :String,
        am_policy_req_trigger_list: :'Array<PolicyReqTrigger>',
        pcf_ue_policy_uri: :String,
        ue_policy_req_trigger_list: :'Array<PolicyReqTrigger>',
        hpcf_id: :String,
        restricted_rat_list: :'Array<RatType>',
        forbidden_area_list: :'Array<Area>',
        service_area_restriction: :ServiceAreaRestriction,
        restricted_core_nw_type_list: :'Array<CoreNetworkType>',
        event_subscription_list: :'Array<Object>',
        mm_context_list: :'Array<MmContext>',
        session_context_list: :'Array<PduSessionContext>',
        trace_data: :Object
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      unless attributes.is_a?(Hash)
        raise ArgumentError, 'The input argument (attributes) must be a hash in `Core5g::UeContext` initialize method'
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) do |(k, v), h|
        unless self.class.attribute_map.key?(k.to_sym)
          raise ArgumentError,
                "`#{k}` is not a valid attribute in `Core5g::UeContext`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end

        h[k.to_sym] = v
      end

      self.supi = attributes[:supi] if attributes.key?(:supi)

      self.supi_unauth_ind = attributes[:supi_unauth_ind] if attributes.key?(:supi_unauth_ind)

      if attributes.key?(:gpsi_list) && (value = attributes[:gpsi_list]).is_a?(Array)
        self.gpsi_list = value
      end

      self.pei = attributes[:pei] if attributes.key?(:pei)

      self.udm_group_id = attributes[:udm_group_id] if attributes.key?(:udm_group_id)

      self.ausf_group_id = attributes[:ausf_group_id] if attributes.key?(:ausf_group_id)

      self.routing_indicator = attributes[:routing_indicator] if attributes.key?(:routing_indicator)

      if attributes.key?(:group_list) && (value = attributes[:group_list]).is_a?(Array)
        self.group_list = value
      end

      self.drx_parameter = attributes[:drx_parameter] if attributes.key?(:drx_parameter)

      self.sub_rfsp = attributes[:sub_rfsp] if attributes.key?(:sub_rfsp)

      self.used_rfsp = attributes[:used_rfsp] if attributes.key?(:used_rfsp)

      self.sub_ue_ambr = attributes[:sub_ue_ambr] if attributes.key?(:sub_ue_ambr)

      self.sms_support = attributes[:sms_support] if attributes.key?(:sms_support)

      self.smsf_id = attributes[:smsf_id] if attributes.key?(:smsf_id)

      self.seaf_data = attributes[:seaf_data] if attributes.key?(:seaf_data)

      self._5g_mm_capability = attributes[:_5g_mm_capability] if attributes.key?(:_5g_mm_capability)

      self.pcf_id = attributes[:pcf_id] if attributes.key?(:pcf_id)

      self.pcf_am_policy_uri = attributes[:pcf_am_policy_uri] if attributes.key?(:pcf_am_policy_uri)

      if attributes.key?(:am_policy_req_trigger_list) && (value = attributes[:am_policy_req_trigger_list]).is_a?(Array)
        self.am_policy_req_trigger_list = value
      end

      self.pcf_ue_policy_uri = attributes[:pcf_ue_policy_uri] if attributes.key?(:pcf_ue_policy_uri)

      if attributes.key?(:ue_policy_req_trigger_list) && (value = attributes[:ue_policy_req_trigger_list]).is_a?(Array)
        self.ue_policy_req_trigger_list = value
      end

      self.hpcf_id = attributes[:hpcf_id] if attributes.key?(:hpcf_id)

      if attributes.key?(:restricted_rat_list) && (value = attributes[:restricted_rat_list]).is_a?(Array)
        self.restricted_rat_list = value
      end

      if attributes.key?(:forbidden_area_list) && (value = attributes[:forbidden_area_list]).is_a?(Array)
        self.forbidden_area_list = value
      end

      if attributes.key?(:service_area_restriction)
        self.service_area_restriction = attributes[:service_area_restriction]
      end

      if attributes.key?(:restricted_core_nw_type_list) && (value = attributes[:restricted_core_nw_type_list]).is_a?(Array)
        self.restricted_core_nw_type_list = value
      end

      if attributes.key?(:event_subscription_list) && (value = attributes[:event_subscription_list]).is_a?(Array)
        self.event_subscription_list = value
      end

      if attributes.key?(:mm_context_list) && (value = attributes[:mm_context_list]).is_a?(Array)
        self.mm_context_list = value
      end

      if attributes.key?(:session_context_list) && (value = attributes[:session_context_list]).is_a?(Array)
        self.session_context_list = value
      end

      return unless attributes.key?(:trace_data)

      self.trace_data = attributes[:trace_data]
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = []
      pattern = /^(imsi-[0-9]{5,15}|nai-.+|.+)$/
      if !@supi.nil? && @supi !~ pattern
        invalid_properties.push("invalid value for \"supi\", must conform to the pattern #{pattern}.")
      end

      if !@gpsi_list.nil? && @gpsi_list.empty?
        invalid_properties.push('invalid value for "gpsi_list", number of items must be greater than or equal to 1.')
      end

      pattern = /^(imei-[0-9]{15}|imeisv-[0-9]{16}|.+)$/
      if !@pei.nil? && @pei !~ pattern
        invalid_properties.push("invalid value for \"pei\", must conform to the pattern #{pattern}.")
      end

      if !@group_list.nil? && @group_list.empty?
        invalid_properties.push('invalid value for "group_list", number of items must be greater than or equal to 1.')
      end

      if !@sub_rfsp.nil? && @sub_rfsp > 256
        invalid_properties.push('invalid value for "sub_rfsp", must be smaller than or equal to 256.')
      end

      if !@sub_rfsp.nil? && @sub_rfsp < 1
        invalid_properties.push('invalid value for "sub_rfsp", must be greater than or equal to 1.')
      end

      if !@used_rfsp.nil? && @used_rfsp > 256
        invalid_properties.push('invalid value for "used_rfsp", must be smaller than or equal to 256.')
      end

      if !@used_rfsp.nil? && @used_rfsp < 1
        invalid_properties.push('invalid value for "used_rfsp", must be greater than or equal to 1.')
      end

      if !@am_policy_req_trigger_list.nil? && @am_policy_req_trigger_list.empty?
        invalid_properties.push('invalid value for "am_policy_req_trigger_list", number of items must be greater than or equal to 1.')
      end

      if !@ue_policy_req_trigger_list.nil? && @ue_policy_req_trigger_list.empty?
        invalid_properties.push('invalid value for "ue_policy_req_trigger_list", number of items must be greater than or equal to 1.')
      end

      if !@restricted_rat_list.nil? && @restricted_rat_list.empty?
        invalid_properties.push('invalid value for "restricted_rat_list", number of items must be greater than or equal to 1.')
      end

      if !@forbidden_area_list.nil? && @forbidden_area_list.empty?
        invalid_properties.push('invalid value for "forbidden_area_list", number of items must be greater than or equal to 1.')
      end

      if !@restricted_core_nw_type_list.nil? && @restricted_core_nw_type_list.empty?
        invalid_properties.push('invalid value for "restricted_core_nw_type_list", number of items must be greater than or equal to 1.')
      end

      if !@event_subscription_list.nil? && @event_subscription_list.empty?
        invalid_properties.push('invalid value for "event_subscription_list", number of items must be greater than or equal to 1.')
      end

      if !@mm_context_list.nil? && @mm_context_list.length > 2
        invalid_properties.push('invalid value for "mm_context_list", number of items must be less than or equal to 2.')
      end

      if !@mm_context_list.nil? && @mm_context_list.empty?
        invalid_properties.push('invalid value for "mm_context_list", number of items must be greater than or equal to 1.')
      end

      if !@session_context_list.nil? && @session_context_list.empty?
        invalid_properties.push('invalid value for "session_context_list", number of items must be greater than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@supi.nil? && @supi !~ /^(imsi-[0-9]{5,15}|nai-.+|.+)$/
      return false if !@gpsi_list.nil? && @gpsi_list.empty?
      return false if !@pei.nil? && @pei !~ /^(imei-[0-9]{15}|imeisv-[0-9]{16}|.+)$/
      return false if !@group_list.nil? && @group_list.empty?
      return false if !@sub_rfsp.nil? && @sub_rfsp > 256
      return false if !@sub_rfsp.nil? && @sub_rfsp < 1
      return false if !@used_rfsp.nil? && @used_rfsp > 256
      return false if !@used_rfsp.nil? && @used_rfsp < 1
      return false if !@am_policy_req_trigger_list.nil? && @am_policy_req_trigger_list.empty?
      return false if !@ue_policy_req_trigger_list.nil? && @ue_policy_req_trigger_list.empty?
      return false if !@restricted_rat_list.nil? && @restricted_rat_list.empty?
      return false if !@forbidden_area_list.nil? && @forbidden_area_list.empty?
      return false if !@restricted_core_nw_type_list.nil? && @restricted_core_nw_type_list.empty?
      return false if !@event_subscription_list.nil? && @event_subscription_list.empty?
      return false if !@mm_context_list.nil? && @mm_context_list.length > 2
      return false if !@mm_context_list.nil? && @mm_context_list.empty?
      return false if !@session_context_list.nil? && @session_context_list.empty?

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] supi Value to be assigned
    def supi=(supi)
      raise ArgumentError, 'supi cannot be nil' if supi.nil?

      pattern = /^(imsi-[0-9]{5,15}|nai-.+|.+)$/
      unless supi&.match?(pattern)
        raise ArgumentError, "invalid value for \"supi\", must conform to the pattern #{pattern}."
      end

      @supi = supi
    end

    # Custom attribute writer method with validation
    # @param [Object] gpsi_list Value to be assigned
    def gpsi_list=(gpsi_list)
      raise ArgumentError, 'gpsi_list cannot be nil' if gpsi_list.nil?

      if gpsi_list.empty?
        raise ArgumentError, 'invalid value for "gpsi_list", number of items must be greater than or equal to 1.'
      end

      @gpsi_list = gpsi_list
    end

    # Custom attribute writer method with validation
    # @param [Object] pei Value to be assigned
    def pei=(pei)
      raise ArgumentError, 'pei cannot be nil' if pei.nil?

      pattern = /^(imei-[0-9]{15}|imeisv-[0-9]{16}|.+)$/
      unless pei&.match?(pattern)
        raise ArgumentError, "invalid value for \"pei\", must conform to the pattern #{pattern}."
      end

      @pei = pei
    end

    # Custom attribute writer method with validation
    # @param [Object] group_list Value to be assigned
    def group_list=(group_list)
      raise ArgumentError, 'group_list cannot be nil' if group_list.nil?

      if group_list.empty?
        raise ArgumentError, 'invalid value for "group_list", number of items must be greater than or equal to 1.'
      end

      @group_list = group_list
    end

    # Custom attribute writer method with validation
    # @param [Object] sub_rfsp Value to be assigned
    def sub_rfsp=(sub_rfsp)
      raise ArgumentError, 'sub_rfsp cannot be nil' if sub_rfsp.nil?

      raise ArgumentError, 'invalid value for "sub_rfsp", must be smaller than or equal to 256.' if sub_rfsp > 256

      raise ArgumentError, 'invalid value for "sub_rfsp", must be greater than or equal to 1.' if sub_rfsp < 1

      @sub_rfsp = sub_rfsp
    end

    # Custom attribute writer method with validation
    # @param [Object] used_rfsp Value to be assigned
    def used_rfsp=(used_rfsp)
      raise ArgumentError, 'used_rfsp cannot be nil' if used_rfsp.nil?

      raise ArgumentError, 'invalid value for "used_rfsp", must be smaller than or equal to 256.' if used_rfsp > 256

      raise ArgumentError, 'invalid value for "used_rfsp", must be greater than or equal to 1.' if used_rfsp < 1

      @used_rfsp = used_rfsp
    end

    # Custom attribute writer method with validation
    # @param [Object] am_policy_req_trigger_list Value to be assigned
    def am_policy_req_trigger_list=(am_policy_req_trigger_list)
      raise ArgumentError, 'am_policy_req_trigger_list cannot be nil' if am_policy_req_trigger_list.nil?

      if am_policy_req_trigger_list.empty?
        raise ArgumentError,
              'invalid value for "am_policy_req_trigger_list", number of items must be greater than or equal to 1.'
      end

      @am_policy_req_trigger_list = am_policy_req_trigger_list
    end

    # Custom attribute writer method with validation
    # @param [Object] ue_policy_req_trigger_list Value to be assigned
    def ue_policy_req_trigger_list=(ue_policy_req_trigger_list)
      raise ArgumentError, 'ue_policy_req_trigger_list cannot be nil' if ue_policy_req_trigger_list.nil?

      if ue_policy_req_trigger_list.empty?
        raise ArgumentError,
              'invalid value for "ue_policy_req_trigger_list", number of items must be greater than or equal to 1.'
      end

      @ue_policy_req_trigger_list = ue_policy_req_trigger_list
    end

    # Custom attribute writer method with validation
    # @param [Object] restricted_rat_list Value to be assigned
    def restricted_rat_list=(restricted_rat_list)
      raise ArgumentError, 'restricted_rat_list cannot be nil' if restricted_rat_list.nil?

      if restricted_rat_list.empty?
        raise ArgumentError,
              'invalid value for "restricted_rat_list", number of items must be greater than or equal to 1.'
      end

      @restricted_rat_list = restricted_rat_list
    end

    # Custom attribute writer method with validation
    # @param [Object] forbidden_area_list Value to be assigned
    def forbidden_area_list=(forbidden_area_list)
      raise ArgumentError, 'forbidden_area_list cannot be nil' if forbidden_area_list.nil?

      if forbidden_area_list.empty?
        raise ArgumentError,
              'invalid value for "forbidden_area_list", number of items must be greater than or equal to 1.'
      end

      @forbidden_area_list = forbidden_area_list
    end

    # Custom attribute writer method with validation
    # @param [Object] restricted_core_nw_type_list Value to be assigned
    def restricted_core_nw_type_list=(restricted_core_nw_type_list)
      raise ArgumentError, 'restricted_core_nw_type_list cannot be nil' if restricted_core_nw_type_list.nil?

      if restricted_core_nw_type_list.empty?
        raise ArgumentError,
              'invalid value for "restricted_core_nw_type_list", number of items must be greater than or equal to 1.'
      end

      @restricted_core_nw_type_list = restricted_core_nw_type_list
    end

    # Custom attribute writer method with validation
    # @param [Object] event_subscription_list Value to be assigned
    def event_subscription_list=(event_subscription_list)
      raise ArgumentError, 'event_subscription_list cannot be nil' if event_subscription_list.nil?

      if event_subscription_list.empty?
        raise ArgumentError,
              'invalid value for "event_subscription_list", number of items must be greater than or equal to 1.'
      end

      @event_subscription_list = event_subscription_list
    end

    # Custom attribute writer method with validation
    # @param [Object] mm_context_list Value to be assigned
    def mm_context_list=(mm_context_list)
      raise ArgumentError, 'mm_context_list cannot be nil' if mm_context_list.nil?

      if mm_context_list.length > 2
        raise ArgumentError, 'invalid value for "mm_context_list", number of items must be less than or equal to 2.'
      end

      if mm_context_list.empty?
        raise ArgumentError, 'invalid value for "mm_context_list", number of items must be greater than or equal to 1.'
      end

      @mm_context_list = mm_context_list
    end

    # Custom attribute writer method with validation
    # @param [Object] session_context_list Value to be assigned
    def session_context_list=(session_context_list)
      raise ArgumentError, 'session_context_list cannot be nil' if session_context_list.nil?

      if session_context_list.empty?
        raise ArgumentError,
              'invalid value for "session_context_list", number of items must be greater than or equal to 1.'
      end

      @session_context_list = session_context_list
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        supi == other.supi &&
        supi_unauth_ind == other.supi_unauth_ind &&
        gpsi_list == other.gpsi_list &&
        pei == other.pei &&
        udm_group_id == other.udm_group_id &&
        ausf_group_id == other.ausf_group_id &&
        routing_indicator == other.routing_indicator &&
        group_list == other.group_list &&
        drx_parameter == other.drx_parameter &&
        sub_rfsp == other.sub_rfsp &&
        used_rfsp == other.used_rfsp &&
        sub_ue_ambr == other.sub_ue_ambr &&
        sms_support == other.sms_support &&
        smsf_id == other.smsf_id &&
        seaf_data == other.seaf_data &&
        _5g_mm_capability == other._5g_mm_capability &&
        pcf_id == other.pcf_id &&
        pcf_am_policy_uri == other.pcf_am_policy_uri &&
        am_policy_req_trigger_list == other.am_policy_req_trigger_list &&
        pcf_ue_policy_uri == other.pcf_ue_policy_uri &&
        ue_policy_req_trigger_list == other.ue_policy_req_trigger_list &&
        hpcf_id == other.hpcf_id &&
        restricted_rat_list == other.restricted_rat_list &&
        forbidden_area_list == other.forbidden_area_list &&
        service_area_restriction == other.service_area_restriction &&
        restricted_core_nw_type_list == other.restricted_core_nw_type_list &&
        event_subscription_list == other.event_subscription_list &&
        mm_context_list == other.mm_context_list &&
        session_context_list == other.session_context_list &&
        trace_data == other.trace_data
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [supi, supi_unauth_ind, gpsi_list, pei, udm_group_id, ausf_group_id, routing_indicator, group_list,
       drx_parameter, sub_rfsp, used_rfsp, sub_ue_ambr, sms_support, smsf_id, seaf_data, _5g_mm_capability, pcf_id, pcf_am_policy_uri, am_policy_req_trigger_list, pcf_ue_policy_uri, ue_policy_req_trigger_list, hpcf_id, restricted_rat_list, forbidden_area_list, service_area_restriction, restricted_core_nw_type_list, event_subscription_list, mm_context_list, session_context_list, trace_data].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash[key.to_s] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash[key.to_s] = attributes[attribute_map[key]].map do |v|
              _deserialize(::Regexp.last_match(1), v)
            end
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash[key.to_s] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Core5g.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
